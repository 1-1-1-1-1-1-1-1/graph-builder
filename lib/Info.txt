06.11.2020 17:58:20 | Правила переноса слов рекомендуют переносить слова с одной строки на
        другую по слогам с учетом морфемного строения. В письменной речи слова
        переносятся с одной строки на другую в соответствии с определенными
        правилами
        переноса.
        
        Хотя в настоящее время существует более лояльный перенос слов,
        все-таки в школьной практике опираемся на морфемное строение слова,
        при переносе не отрывая одну или две буквы от приставки, корня или
        суффикса.
        
        НАПРИМЕР
        Перенос слова брат-ский, сохраняющий целостность корня брат-,
        предпочтительнее, чем возможный перенос бра-тский в соответствии с
        фонетическим делением на
        слоги.
        Основные правила переноса
        слов
        Основные правила переноса слов в русском
        языке
        
        1. Слова переносятся с одной строки на другую по
        слогам:
        
        ин-те-рес
        со-ло-вей
        кра-со-та.
        Односложные слова не подлежат переносу, а пишутся целиком на
        строке.
        лень
        раб
        лось
        краб
        стол
        глушь.06.11.2020 18:22:58 | Building the graph with following
    parameters:
    * function: <function build.<locals>.<lambda> at
    0x0000020EBEEB3EE0>
    * Defined on (-10,
    10)
    * Using `<function lagrange_polynomial at 0x0000020EBEEB3550>` for
    approximation
    * Forming args as `(chebyshev_nodes(*xborders,
    nodes_n),)`
    * Build parameters: {'borders': 1, 'times':
    100}
    * Building the graph of function and its
    approximation
    * Nodes number:
    7.06.11.2020 18:24:44 | Building the graph with following
    parameters:
    * function: <function build.<locals>.<lambda> at
    0x0000017A17EF3EE0>
    * Defined on (-10,
    10)
    * Using `<function lagrange_polynomial at 0x0000017A17EF3550>` for
    approximation
    * Forming args as `(chebyshev_nodes(*xborders,
    nodes_n),)`
    * Build parameters: {'borders': 1, 'times':
    100}
    * Building the graph of function and its
    approximation
    * Nodes' number:
    7.
    
06.11.2020 18:35:25 | Building the graph with following
    parameters:
    * function: <function build.<locals>.<lambda> at
    0x00000222DB2C3EE0>
    * Defined on (-10,
    10)
    * Using `<function lagrange_polynomial at 0x00000222DB2C3550>` for
    approximation
    * Forming args as `(chebyshev_nodes(*xborders,
    nodes_n),)`
    * Build parameters: {'borders': 1, 'times':
    100}
    * Building the graph of function and its
    approximation
    * Nodes' number:
    7.
07.11.2020 16:49:02 | Building the graph with following parameters:
* function: <function build.<locals>.<lambda> at 0x0000022D5B413EE0>
* Defined on (-10, 10)
* Using `<function lagrange_polynomial at 0x0000022D5B413550>` for approximation
* Forming args as `(chebyshev_nodes(*xborders, nodes_n),)`
* Build parameters: {'borders': 1, 'times': 100}
* Building the graph of function and its approximation
* Nodes' number: 7.

07.11.2020 16:50:58 | Building the graph with following parameters:
 * function: <function build.<locals>.<lambda> at 0x000001E38AD31EE0>
 * Defined on (-10, 10)
 * Using `<function lagrange_polynomial at 0x000001E38AD31550>` for approximation
 * Forming args as `(chebyshev_nodes(*xborders, nodes_n),)`
 * Build parameters: {'borders': 1, 'times': 100}
 * Building the graph of function and its approximation
 * Nodes' number: 7.

08.11.2020 20:48:12 | Building the graph with following parameters:
 * function: <function build.<locals>.<lambda> at 0x0000026CE7AC3EE0>
 * Defined on (-10, 10)
 * Using `<function lagrange_polynomial at 0x0000026CE7AC3550>` for approximation
 * Forming args as `(chebyshev_nodes(*xborders, nodes_n),)`
 * Build parameters: {'borders': 1, 'times': 100}
 * Building the graph of function and its approximation
 * Nodes' number: 7.

08.11.2020 22:01:13 | Done! Finished running of `config`.

08.11.2020 22:01:35 | Done! Finished running of `config`.

08.11.2020 22:01:54 | Done! Finished running of `config`.

08.11.2020 22:02:12 | Done! Finished running of `config`.

08.11.2020 22:02:53 | Building the graph with following parameters:
 * function: <function build.<locals>.<lambda> at 0x00000135D40210D0>
 * Defined on (-10, 10)
 * Using `<function lagrange_polynomial at 0x00000135D4023670>` for approximation
 * Forming args as `(chebyshev_nodes(*xborders, nodes_n),)`
 * Build parameters: {'borders': 1, 'times': 100}
 * Building the graph of function and its approximation
 * Nodes' number: 7.

08.11.2020 22:04:43 | Done! Finished running of `config`.

08.11.2020 22:05:41 | Done! Finished running of `config`.

08.11.2020 22:06:56 | Done! Finished running of `config`.

08.11.2020 22:10:22 | Done! Finished running of `config`.

09.11.2020 13:30:23 | Building the graph with following parameters:
 * function: <function build.<locals>.<lambda> at 0x0000026DEF02A160>
 * Defined on (-10, 10)
 * Using `<function lagrange_polynomial at 0x0000026DEF0235E0>` for approximation
 * Forming args as `(chebyshev_nodes(*xborders, nodes_n),)`
 * Build parameters: {'borders': 1, 'times': 100}
 * Building the graph of function and its approximation
 * Nodes' number: 100.

09.11.2020 13:39:25 | Building the graph with following parameters:
 * function: <function build.<locals>.<lambda> at 0x000002829B242F70>
 * Defined on (-10, 10)
 * Using `<function lagrange_polynomial at 0x000002829B2425E0>` for approximation
 * Forming args as `(chebyshev_nodes(*xborders, nodes_n),)`
 * Build parameters: {'borders': 1, 'times': 100}
 * Building the graph of function and its approximation
 * Nodes' number: 7.

09.11.2020 14:32:58 | Building the graph with following parameters:
 * function: <function build.<locals>.<lambda> at 0x00000197D69920D0>
 * Defined on (-10, 10)
 * Using `<function lagrange_polynomial at 0x00000197D6994670>` for approximation
 * Forming args as `(chebyshev_nodes(*xborders, nodes_n),)`
 * Build parameters: {'borders': 1, 'times': 100}
 * Building the graph of function and its approximation
 * Nodes' number: 7.

09.11.2020 14:33:11 | Building the graph with following parameters:
 * function: <function build.<locals>.<lambda> at 0x00000197D69925E0>
 * Defined on (-10, 10)
 * Using `<function lagrange_polynomial at 0x00000197D6994670>` for approximation
 * Forming args as `(chebyshev_nodes(*xborders, nodes_n),)`
 * Build parameters: {'borders': 1, 'times': 100}
 * Building the graph of function and its approximation
 * Nodes' number: 7.

09.11.2020 14:33:27 | Building the graph with following parameters:
 * function: <function build.<locals>.<lambda> at 0x0000021B084120D0>
 * Defined on (-10, 10)
 * Using `<function lagrange_polynomial at 0x0000021B08414670>` for approximation
 * Forming args as `(chebyshev_nodes(*xborders, nodes_n),)`
 * Build parameters: {'borders': 1, 'times': 100}
 * Building the graph of function and its approximation
 * Nodes' number: 7.

09.11.2020 14:36:25 | Building the graph with following parameters:
 * function: <function build.<locals>.<lambda> at 0x0000021741952040>
 * Defined on (-10, 10)
 * Using `<function lagrange_polynomial at 0x0000021741954670>` for approximation
 * Forming args as `(chebyshev_nodes(*xborders, nodes_n),)`
 * Build parameters: {'borders': 1, 'times': 100}
 * Building the graph of function and its approximation
 * Nodes' number: 7.

09.11.2020 14:36:29 | Building the graph with following parameters:
 * function: <function build.<locals>.<lambda> at 0x00000217419525E0>
 * Defined on (-10, 10)
 * Using `<function lagrange_polynomial at 0x0000021741954670>` for approximation
 * Forming args as `(chebyshev_nodes(*xborders, nodes_n),)`
 * Build parameters: {'borders': 1, 'times': 100}
 * Building the graph of function and its approximation
 * Nodes' number: 7.

09.11.2020 14:36:46 | Building the graph with following parameters:
 * function: <function build.<locals>.<lambda> at 0x000001FEC70320D0>
 * Defined on (-10, 10)
 * Using `<function lagrange_polynomial at 0x000001FEC7033670>` for approximation
 * Forming args as `(chebyshev_nodes(*xborders, nodes_n),)`
 * Build parameters: {'borders': 1, 'times': 100}
 * Building the graph of function and its approximation
 * Nodes' number: 7.

09.11.2020 14:36:50 | Building the graph with following parameters:
 * function: <function build.<locals>.<lambda> at 0x000001FEC70325E0>
 * Defined on (-10, 10)
 * Using `<function lagrange_polynomial at 0x000001FEC7033670>` for approximation
 * Forming args as `(chebyshev_nodes(*xborders, nodes_n),)`
 * Build parameters: {'borders': 1, 'times': 100}
 * Building the graph of function and its approximation
 * Nodes' number: 7.

09.11.2020 14:36:58 | Building the graph with following parameters:
 * function: <function build.<locals>.<lambda> at 0x000001FECA2F1F70>
 * Defined on (-10, 10)
 * Using `<function lagrange_polynomial at 0x000001FEC7033670>` for approximation
 * Forming args as `(chebyshev_nodes(*xborders, nodes_n),)`
 * Build parameters: {'borders': 1, 'times': 100}
 * Building the graph of function and its approximation
 * Nodes' number: 7.

09.11.2020 14:51:22 | Building the graph with following parameters:
 * function: <function build.<locals>.<lambda> at 0x000002C27742D160>
 * Defined on (-10, 10)
 * Using `<function lagrange_polynomial at 0x000002C277435670>` for approximation
 * Forming args as `(chebyshev_nodes(*xborders, nodes_n),)`
 * Build parameters: {'borders': 1, 'times': 100}
 * Building the graph of function and its approximation
 * Nodes' number: 30.

09.11.2020 14:55:41 | Building the graph with following parameters:
 * function: <function build.<locals>.<lambda> at 0x00000169666AD160>
 * Defined on (-10, 10)
 * Using `<function lagrange_polynomial at 0x00000169666B5670>` for approximation
 * Forming args as `(chebyshev_nodes(*xborders, nodes_n),)`
 * Build parameters: {'borders': 1, 'times': 100}
 * Building the graph of function and its approximation
 * Nodes' number: 30.

09.11.2020 18:14:51 | Building the graph with following parameters:
 * function: <function build.<locals>.<lambda> at 0x0000018F51FAB310>
 * Defined on (-10, 10)
 * Using `<function newton_polynomial_forward at 0x0000018F51F9B670>` for approximation
 * Forming args as `(chebyshev_nodes(*xborders, nodes_n),)`
 * Build parameters: {'borders': 1, 'times': 100}
 * Building the graph of function and its approximation
 * Nodes' number: 7.

09.11.2020 18:14:58 | Building the graph with following parameters:
 * function: <function build.<locals>.<lambda> at 0x0000018F52F55160>
 * Defined on (-10, 10)
 * Using `<function newton_polynomial_forward at 0x0000018F51F9B670>` for approximation
 * Forming args as `(chebyshev_nodes(*xborders, nodes_n),)`
 * Build parameters: {'borders': 1, 'times': 100}
 * Building the graph of function and its approximation
 * Nodes' number: 7.

09.11.2020 20:17:14 | Building the graph with following parameters:
 * function: <function build.<locals>.<lambda> at 0x0000018BB3A4AA60>
 * Defined on (-10, 10)
 * Using `<function lagrange_polynomial at 0x0000018BB2A4C700>` for approximation
 * Forming args as `(chebyshev_nodes(*xborders, nodes_n),)`
 * Build parameters: {'borders': 1, 'times': 100}
 * Building the graph of function and its approximation
 * Nodes' number: 100.

09.11.2020 21:38:33 | Building the graph with following parameters:
 * function: <function build.<locals>.<lambda> at 0x00000225DCBDE0D0>
 * Defined on (-10, 10)
 * Using `<function lagrange_polynomial at 0x00000225DCBE5670>` for approximation
 * Forming args as `(chebyshev_nodes(*xborders, nodes_n),)`
 * Build parameters: {'borders': 1, 'times': 100}
 * Building the graph of function and its approximation
 * Nodes' number: 30.

10.11.2020 14:20:45 | Building the graph with following parameters:
 * function: <function build.<locals>.<lambda> at 0x0000020D93FAA820>
 * Defined on (-10, 10)
 * Using `<function newton_polynomial_forward at 0x0000020D93E28790>` for approximation
 * Forming args as `(chebyshev_nodes(*xborders, nodes_n),)`
 * Build parameters: {'borders': 1, 'times': 100}
 * Building the graph of function and its approximation
 * Nodes' number: 30.

10.11.2020 18:08:15 | Building the graph with following parameters:
 * function: <function build.<locals>.<lambda> at 0x000001D307DEAEE0>
 * Defined on (-10, 10)
 * Using `<function lagrange_polynomial at 0x000001D37FDA8820>` for approximation
 * Forming args as `(chebyshev_nodes(*xborders, nodes_n),)`
 * Build parameters: {'borders': 1, 'times': 100}
 * Building the graph of function and its approximation
 * Nodes' number: 30.

10.11.2020 18:11:33 | Building the graph with following parameters:
 * function: <function build.<locals>.<lambda> at 0x0000022043AF5310>
 * Defined on (-10, 10)
 * Using `<function lagrange_polynomial at 0x0000022043AE8820>` for approximation
 * Forming args as `(chebyshev_nodes(*xborders, nodes_n),)`
 * Build parameters: {'borders': 1, 'times': 100}
 * Building the graph of function and its approximation
 * Nodes' number: 30.

10.11.2020 18:11:38 | Building the graph with following parameters:
 * function: <function build.<locals>.<lambda> at 0x0000022043AF58B0>
 * Defined on (-10, 10)
 * Using `<function newton_polynomial_forward at 0x0000022043AE8790>` for approximation
 * Forming args as `(chebyshev_nodes(*xborders, nodes_n),)`
 * Build parameters: {'borders': 1, 'times': 100}
 * Building the graph of function and its approximation
 * Nodes' number: 30.

10.11.2020 18:12:06 | Building the graph with following parameters:
 * function: <function build.<locals>.<lambda> at 0x000001D86DDEE160>
 * Defined on (-10, 10)
 * Using `<function newton_polynomial_forward at 0x000001D86DDF45E0>` for approximation
 * Forming args as `(chebyshev_nodes(*xborders, nodes_n),)`
 * Build parameters: {'borders': 1, 'times': 100}
 * Building the graph of function and its approximation
 * Nodes' number: 7.

10.11.2020 18:12:12 | Building the graph with following parameters:
 * function: <function build.<locals>.<lambda> at 0x000001D86ED84DC0>
 * Defined on (-10, 10)
 * Using `<function lagrange_polynomial at 0x000001D86DDF4670>` for approximation
 * Forming args as `(chebyshev_nodes(*xborders, nodes_n),)`
 * Build parameters: {'borders': 1, 'times': 100}
 * Building the graph of function and its approximation
 * Nodes' number: 7.

10.11.2020 18:12:17 | Building the graph with following parameters:
 * function: <function build.<locals>.<lambda> at 0x000001D8710B0F70>
 * Defined on (-10, 10)
 * Using `<function lagrange_polynomial at 0x000001D86DDF4670>` for approximation
 * Forming args as `(chebyshev_nodes(*xborders, nodes_n),)`
 * Build parameters: {'borders': 1, 'times': 100}
 * Building the graph of function and its approximation
 * Nodes' number: 20.

10.11.2020 18:12:22 | Building the graph with following parameters:
 * function: <function build.<locals>.<lambda> at 0x000001D86ED84040>
 * Defined on (-10, 10)
 * Using `<function newton_polynomial_forward at 0x000001D86DDF45E0>` for approximation
 * Forming args as `(chebyshev_nodes(*xborders, nodes_n),)`
 * Build parameters: {'borders': 1, 'times': 100}
 * Building the graph of function and its approximation
 * Nodes' number: 20.

10.11.2020 18:13:25 | Building the graph with following parameters:
 * function: <function build.<locals>.<lambda> at 0x000001E0098DC160>
 * Defined on (-10, 10)
 * Using `<function lagrange_polynomial at 0x000001E0098E3670>` for approximation
 * Forming args as `(chebyshev_nodes(*xborders, nodes_n),)`
 * Build parameters: {'borders': 1, 'times': 100}
 * Building the graph of function and its approximation
 * Nodes' number: 12.

10.11.2020 18:13:29 | Building the graph with following parameters:
 * function: <function build.<locals>.<lambda> at 0x000001E0098DC700>
 * Defined on (-10, 10)
 * Using `<function newton_polynomial_forward at 0x000001E0098E35E0>` for approximation
 * Forming args as `(chebyshev_nodes(*xborders, nodes_n),)`
 * Build parameters: {'borders': 1, 'times': 100}
 * Building the graph of function and its approximation
 * Nodes' number: 12.

10.11.2020 18:13:45 | Building the graph with following parameters:
 * function: <function build.<locals>.<lambda> at 0x000001E00CBBA0D0>
 * Defined on (-10, 10)
 * Using `<function newton_polynomial_forward at 0x000001E0098E35E0>` for approximation
 * Forming args as `(chebyshev_nodes(*xborders, nodes_n),)`
 * Build parameters: {'borders': 1, 'times': 100}
 * Building the graph of function and its approximation
 * Nodes' number: 15.

10.11.2020 18:43:10 | Building the graph with following parameters:
 * function: <function build.<locals>.<lambda> at 0x000002B06B8020D0>
 * Defined on (-10, 10)
 * Using `<function lagrange_polynomial at 0x000002B06B8035E0>` for approximation
 * Forming args as `(chebyshev_nodes(*xborders, nodes_n),)`
 * Build parameters: {'borders': 1, 'times': 100}
 * Building the graph of function and its approximation
 * Nodes' number: 30.

10.11.2020 20:21:33 | The table was built in 5.430621862411499 seconds.

10.11.2020 20:22:03 | The table was built in 1.4 seconds.

10.11.2020 20:22:34 | The table was built in 1.4 seconds.

10.11.2020 20:24:59 | The table was built in 1.4 seconds.

10.11.2020 20:25:06 | The table was built in 1.5 seconds.

10.11.2020 20:25:14 | The table was built in 1.4 seconds.

10.11.2020 20:25:44 | The table was built in 1.5 seconds.

10.11.2020 20:25:49 | The table was built in 1.6 seconds.

10.11.2020 20:25:56 | The table was built in 1.4 seconds.

10.11.2020 20:26:47 | Building the graph with following parameters:
 * function: <function build.<locals>.<lambda> at 0x000002DF405A1040>
 * Defined on (-10, 10)
 * Using `<function lagrange_polynomial at 0x000002DF405A3550>` for approximation
 * Forming args as `(chebyshev_nodes(*xborders, nodes_n),)`
 * Build parameters: {'borders': 1, 'times': 100}
 * Building the graph of function and its approximation
 * Nodes' number: 30.

10.11.2020 20:26:51 | The table was built in 1.5 seconds.

10.11.2020 20:44:12 | Building the graph with following parameters:
 * function: <function build.<locals>.<lambda> at 0x0000018E4A2AD0D0>
 * Defined on (-10, 10)
 * Using `<function lagrange_polynomial at 0x0000018E4A2B55E0>` for approximation
 * Forming args as `(chebyshev_nodes(*xborders, nodes_n),)`
 * Build parameters: {'borders': 1, 'times': 100}
 * Building the graph of function and its approximation
 * Nodes' number: 30.
10.11.2020 20:46:41 | Building the table with following parameters:
 * Function: abs(x)
 * Defined on (-10, 10)
 * Using `lagrange_polynomial` for approximation
 * Nodes' number: 30.
 * Alpha: 0.5.
10.11.2020 20:46:43 | The table was built in 1.5 seconds.10.11.2020 20:47:12 | Building the table with following parameters:
 * Function: abs(x)
 * Defined on (-10, 10)
 * Using `lagrange_polynomial` for approximation
 * Nodes' number: 30.
 * Alpha: 0.5.
10.11.2020 20:47:14 | The table was built in 1.5 seconds.
10.11.2020 20:49:12 | Building the table with following parameters:
 * Function: abs(x)
 * Defined on (-10, 10)
 * Using `lagrange_polynomial` for approximation
 * Nodes' number: 30.
 * Alpha: 0.5.
10.11.2020 20:49:13 | The table was built in 1.5 seconds.
10.11.2020 20:59:20 | Building the table with following parameters:
 * Function: abs(x)
 * Defined on (-10, 10)
 * Using `lagrange_polynomial` for approximation
 * Nodes' number: 30.
 * Alpha: 0.5.
10.11.2020 20:59:22 | The table was built in 1.4 seconds.
10.11.2020 21:02:26 | Building the table with following parameters:
 * Function: abs(x)
 * Defined on (-10, 10)
 * Using `lagrange_polynomial` for approximation
 * Nodes' number: 30.
 * Alpha: 0.5.
10.11.2020 21:02:28 | The table was built in 1.4 seconds.
10.11.2020 21:04:48 | Building the graph with following parameters:
 * function: <function build.<locals>.<lambda> at 0x0000020085902040>
 * Defined on (-10, 10)
 * Using `<function lagrange_polynomial at 0x0000020085904550>` for approximation
 * Forming args as `(chebyshev_nodes(*xborders, nodes_n),)`
 * Build parameters: {'borders': 1, 'times': 100}
 * Building the graph of function and its approximation
 * Nodes' number: 30.
10.11.2020 21:08:07 | Building the graph with following parameters:
 * function: <function build.<locals>.<lambda> at 0x00000117D5EAE0D0>
 * Defined on (-10, 10)
 * Using `<function lagrange_polynomial at 0x00000117D5EB65E0>` for approximation
 * Forming args as `(chebyshev_nodes(*xborders, nodes_n),)`
 * Build parameters: {'borders': 1, 'times': 100}
 * Building the graph of function and its approximation
 * Nodes' number: 30.10.11.2020 21:08:20 | Building the table with following parameters:
 * Function: abs(x)
 * Defined on (-10, 10)
 * Using `lagrange_polynomial` for approximation
 * Nodes' number: 30.
 * Alpha: 0.5.
10.11.2020 21:08:22 | The table was built in 1.5 seconds.
10.11.2020 21:09:59 | Building the table with following parameters:
 * Function: abs(x)
 * Defined on (-10, 10)
 * Using `lagrange_polynomial` for approximation
 * Nodes' number: 30.
 * Alpha: 0.5.
10.11.2020 21:10:00 | The table was built in 1.5 seconds.
10.11.2020 21:11:12 | Building the graph with following parameters:
 * function: <function build.<locals>.<lambda> at 0x000001BF679C1040>
 * Defined on (-10, 10)
 * Using `<function lagrange_polynomial at 0x000001BF679C4550>` for approximation
 * Forming args as `(chebyshev_nodes(*xborders, nodes_n),)`
 * Build parameters: {'borders': 1, 'times': 100}
 * Building the graph of function and its approximation
 * Nodes' number: 70.
10.11.2020 21:13:19 | Building the graph with following parameters:
 * function: <function build.<locals>.<lambda> at 0x000001BF679C15E0>
 * Defined on (-10, 10)
 * Using `<function lagrange_polynomial at 0x000001BF679C4550>` for approximation
 * Forming args as `(chebyshev_nodes(*xborders, nodes_n),)`
 * Build parameters: {'borders': 1, 'times': 100}
 * Building the graph of function and its approximation
 * Nodes' number: 70.
10.11.2020 21:44:43 | Building the table with following parameters:
 * Function: abs(x)
 * Defined on (-10, 10)
 * Using `lagrange_polynomial` for approximation
 * Nodes' number: 30.
 * Alpha: 0.5.
10.11.2020 21:44:45 | The table was built in 1.4 seconds.
10.11.2020 21:44:49 | Building the graph with following parameters:
 * function: <function build.<locals>.<lambda> at 0x000002716D88AEE0>
 * Defined on (-10, 10)
 * Using `<function lagrange_polynomial at 0x000002716D7055E0>` for approximation
 * Forming args as `(chebyshev_nodes(*xborders, nodes_n),)`
 * Build parameters: {'a': 1, 'borders': 1, 'times': 100}
 * Building the graph of function and its approximation
 * Nodes' number: 30.
10.11.2020 21:45:17 | Building the graph with following parameters:
 * function: <function build.<locals>.<lambda> at 0x000002716D8AE0D0>
 * Defined on (-10, 10)
 * Using `<function lagrange_polynomial at 0x000002716D7055E0>` for approximation
 * Forming args as `(chebyshev_nodes(*xborders, nodes_ns),)`
 * Build parameters: {'a': 1, 'borders': 1, 'times': 100}
 * Building the graph of function and its approximation
 * Nodes' number: 30.
10.11.2020 21:45:17 | While bilding graph: error: name 'nodes_ns' is not defined
10.11.2020 21:45:24 | Building the graph with following parameters:
 * function: <function build.<locals>.<lambda> at 0x000002716D8AE0D0>
 * Defined on (-10, 10)
 * Using `<function lagrange_polynomial at 0x000002716D7055E0>` for approximation
 * Forming args as `(chebyshev_nodes(*xborders, nodes_n),)`
 * Build parameters: {'a': 1, 'borders': 1, 'times': 100}
 * Building the graph of function and its approximation
 * Nodes' number: 30.
10.11.2020 21:45:30 | Building the graph with following parameters:
 * function: <function build.<locals>.<lambda> at 0x0000027172EBC8B0>
 * Defined on (-10, 10)
 * Using `<function lagrange_polynomial at 0x000002716D7055E0>` for approximation
 * Forming args as `(chebyshev_nodes(s*xborders, nodes_n),)`
 * Build parameters: {'a': 1, 'borders': 1, 'times': 100}
 * Building the graph of function and its approximation
 * Nodes' number: 30.
10.11.2020 21:45:30 | While bilding graph: error: name 's' is not defined
10.11.2020 21:45:35 | The graph was built in 1.1e+01 seconds.
10.11.2020 21:45:40 | The graph was built in 5.1e+01 seconds.
10.11.2020 21:46:48 | Building the graph with following parameters:
 * function: <function build.<locals>.<lambda> at 0x000002CAF02EF0D0>
 * Defined on (-10, 10)
 * Using `<function lagrange_polynomial at 0x000002CAF02F45E0>` for approximation
 * Forming args as `(chebyshedv_nodes(*xborders, nodes_n),)`
 * Build parameters: {'borders': 1, 'times': 100}
 * Building the graph of function and its approximation
 * Nodes' number: 30.
10.11.2020 21:46:48 | While building graph: error: name 'chebyshedv_nodes' is not defined
10.11.2020 21:47:43 | Building the graph with following parameters:
 * function: <function build.<locals>.<lambda> at 0x00000192C303C0D0>
 * Defined on (-10, 10)
 * Using `<function lagrange_polynomial at 0x00000192C30435E0>` for approximation
 * Forming args as `(chebyshev_nodes(*xborders, nodes_n),)`
 * Build parameters: {'borders': 1, 'times': 100}
 * Building the graph of function and its approximation
 * Nodes' number: 30.
10.11.2020 21:47:47 | The graph was built in 4.0 seconds.
10.11.2020 21:48:02 | Building the graph with following parameters:
 * function: <function build.<locals>.<lambda> at 0x000002024D25D0D0>
 * Defined on (-10, 10)
 * Using `<function lagrange_polynomial at 0x000002024D2625E0>` for approximation
 * Forming args as `(chebyshevd_nodes(*xborders, nodes_n),)`
 * Build parameters: {'borders': 1, 'times': 100}
 * Building the graph of function and its approximation
 * Nodes' number: 30.
10.11.2020 21:48:02 | While building graph: error: name 'chebyshevd_nodes' is not defined
10.11.2020 21:48:13 | Building the graph with following parameters:
 * function: <function build.<locals>.<lambda> at 0x000002A26AA7C0D0>
 * Defined on (-10, 10)
 * Using `<function lagrange_polynomial at 0x000002A26AA835E0>` for approximation
 * Forming args as `(chebyshev_nodes(*xborders, nodes_n),)`
 * Build parameters: {'borders': 1, 'times': 100}
 * Building the graph of function and its approximation
 * Nodes' number: 10.
10.11.2020 21:48:15 | The graph was built in 2.4 seconds.
10.11.2020 21:48:47 | Building the graph with following parameters:
 * function: <function build.<locals>.<lambda> at 0x0000019D32BEC0D0>
 * Defined on (-10, 10)
 * Using `<function lagrange_polynomial at 0x0000019D32BF25E0>` for approximation
 * Forming args as `(chebyshev_nodes(*xborders, nodes_n),)`
 * Build parameters: {'borders': 1, 'times': 100}
 * Building the graph of function and its approximation
 * Nodes' number: 30.
10.11.2020 21:48:51 | The graph was built in 4.0 seconds.
10.11.2020 21:48:51 | While building graph: error: can't invoke "frame" command: application has been destroyed
10.11.2020 21:49:58 | Building the graph with following parameters:
 * function: <function build.<locals>.<lambda> at 0x00000299EF14E0D0>
 * Defined on (-10, 10)
 * Using `<function lagrange_polynomial at 0x00000299EF1535E0>` for approximation
 * Forming args as `(chebyshev_nodes(*xboedrders, nodes_n),)`
 * Build parameters: {'borders': 1, 'times': 100}
 * Building the graph of function and its approximation
 * Nodes' number: 30.
10.11.2020 21:49:58 | While building graph: error: name 'xboedrders' is not defined
10.11.2020 21:58:23 | Building the graph with following parameters:
 * function: <function build.<locals>.<lambda> at 0x0000021435A39040>
 * Defined on (-10, 10)
 * Using `<function lagrange_polynomial at 0x0000021435A32550>` for approximation
 * Forming args as `(chebyshev_nodes(*xborders, nodes_n),)`
 * Build parameters: {'borders': 1, 'times': 100}
 * Building the graph of function and its approximation
 * Nodes' number: 30.
10.11.2020 21:59:09 | Building the graph with following parameters:
 * function: <function build.<locals>.<lambda> at 0x000001F3C79B9040>
 * Defined on (-10, 10)
 * Using `<function lagrange_polynomial at 0x000001F3C79B2550>` for approximation
 * Forming args as `(chebyshev_nodes(*xborders, nodes_n),)`
 * Build parameters: {'borders': 1, 'times': 100}
 * Building the graph of function and its approximation
 * Nodes' number: 30.
10.11.2020 21:59:23 | The graph was built in 1.4e+01 seconds.
10.11.2020 21:59:23 | While building graph: error: can't invoke "frame" command: application has been destroyed
10.11.2020 21:59:52 | Building the graph with following parameters:
 * function: <function build.<locals>.<lambda> at 0x0000014EECD18040>
 * Defined on (-10, 10)
 * Using `<function lagrange_polynomial at 0x0000014EECD11550>` for approximation
 * Forming args as `(chebyshev_nodes(*xborders, nodes_n),)`
 * Build parameters: {'borders': 1, 'times': 100}
 * Building the graph of function and its approximation
 * Nodes' number: 30.
10.11.2020 22:00:03 | The graph was built in 1.1e+01 seconds.
10.11.2020 22:00:03 | While building graph: error: can't invoke "frame" command: application has been destroyed
10.11.2020 22:21:22 | Building the graph with following parameters:
 * function: <function build.<locals>.<lambda> at 0x000002B85ECEE1F0>
 * Defined on (-10, 10)
 * Using `<function lagrange_polynomial at 0x000002B85ECE7700>` for approximation
 * Forming args as `(chebyshev_nodes(*xborders, nodes_n),)`
 * Build parameters: {'borders': 1, 'times': 100}
 * Building the graph of function and its approximation
 * Nodes' number: 30.
10.11.2020 22:21:27 | The graph was built in 4.3 seconds.
10.11.2020 22:21:27 | While building graph: error: can't invoke "frame" command: application has been destroyed
10.11.2020 22:22:49 | Building the graph with following parameters:
 * function: <function build.<locals>.<lambda> at 0x0000017A983E9040>
 * Defined on (-10, 10)
 * Using `<function lagrange_polynomial at 0x0000017A983E2550>` for approximation
 * Forming args as `(chebyshev_nodes(*xborders, nodes_n),)`
 * Build parameters: {'borders': 1, 'times': 100}
 * Building the graph of function and its approximation
 * Nodes' number: 30.
10.11.2020 22:22:55 | The graph was built in 5.6 seconds.
10.11.2020 22:22:55 | While building graph: error: can't invoke "frame" command: application has been destroyed
10.11.2020 22:23:23 | Building the graph with following parameters:
 * function: <function build.<locals>.<lambda> at 0x0000023C4DC70040>
 * Defined on (-10, 10)
 * Using `<function lagrange_polynomial at 0x0000023C4DC72550>` for approximation
 * Forming args as `(chebyshev_nodes(*xborders, nodes_n),)`
 * Build parameters: {'borders': 1, 'times': 100}
 * Building the graph of function and its approximation
 * Nodes' number: 30.
10.11.2020 22:23:32 | The graph was built in 8.8 seconds.
10.11.2020 22:23:32 | While building graph: error: can't invoke "frame" command: application has been destroyed
10.11.2020 22:24:42 | Building the graph with following parameters:
 * function: <function build.<locals>.<lambda> at 0x000001C10C8AD1F0>
 * Defined on (-10, 10)
 * Using `<function lagrange_polynomial at 0x000001C10C8A7700>` for approximation
 * Forming args as `(chebyshev_nodes(*xborders, nodes_n),)`
 * Build parameters: {'borders': 1, 'times': 100}
 * Building the graph of function and its approximation
 * Nodes' number: 30.
10.11.2020 22:24:55 | The graph was built in 1.3e+01 seconds.
10.11.2020 22:24:55 | While building graph: error: can't invoke "frame" command: application has been destroyed
10.11.2020 22:28:30 | Building the graph with following parameters:
 * function: <function build.<locals>.<lambda> at 0x000001AB77DAD0D0>
 * Defined on (-10, 10)
 * Using `<function lagrange_polynomial at 0x000001AB77DB35E0>` for approximation
 * Forming args as `(chebyshev_nodes(*xborders, nodes_n),)`
 * Build parameters: {'borders': 1, 'times': 100}
 * Building the graph of function and its approximation
 * Nodes' number: 30.
10.11.2020 22:28:35 | Building the graph with following parameters:
 * function: <function build.<locals>.<lambda> at 0x000001AB77DAD670>
 * Defined on (-10, 10)
 * Using `<function lagrange_polynomial at 0x000001AB77DB35E0>` for approximation
 * Forming args as `(chebyshev_nodes(*xborders, nodes_n),)`
 * Build parameters: {'borders': 1, 'times': 100}
 * Building the graph of function and its approximation
 * Nodes' number: 30.
10.11.2020 22:28:44 | The graph was built in 9.2 seconds.
10.11.2020 22:28:54 | The graph was built in 2.4e+01 seconds.
10.11.2020 22:29:05 | Building the graph with following parameters:
 * function: <function build.<locals>.<lambda> at 0x000002A59BC2D0D0>
 * Defined on (-10, 10)
 * Using `<function lagrange_polynomial at 0x000002A59BC345E0>` for approximation
 * Forming args as `(chebyshev_nodes(*xborders, nodes_n),)`
 * Build parameters: {'borders': 1, 'times': 100}
 * Building the graph of function and its approximation
 * Nodes' number: 30.
10.11.2020 22:29:09 | The graph was built in 3.9 seconds.
10.11.2020 22:30:31 | Building the graph with following parameters:
 * function: <function build.<locals>.<lambda> at 0x000001C2BA341280>
 * Defined on (-10, 10)
 * Using `<function lagrange_polynomial at 0x000001C2BA337790>` for approximation
 * Forming args as `(chebyshev_nodes(*xborders, nodes_n),)`
 * Build parameters: {'borders': 1, 'times': 100}
 * Building the graph of function and its approximation
 * Nodes' number: 30.
10.11.2020 22:30:34 | The graph was built in 3.4 seconds.
10.11.2020 22:31:07 | Building the graph with following parameters:
 * function: <function build.<locals>.<lambda> at 0x000002429E841280>
 * Defined on (-10, 10)
 * Using `<function lagrange_polynomial at 0x000002429E835790>` for approximation
 * Forming args as `(chebyshev_nodes(*xborders, nodes_n),)`
 * Build parameters: {'borders': 1, 'times': 100}
 * Building the graph of function and its approximation
 * Nodes' number: 30.
10.11.2020 22:31:25 | Building the graph with following parameters:
 * function: <function build.<locals>.<lambda> at 0x000002429E841820>
 * Defined on (-10, 10)
 * Using `<function lagrange_polynomial at 0x000002429E835790>` for approximation
 * Forming args as `(chebyshev_nodes(*xborders, nodes_n),)`
 * Build parameters: {'borders': 1, 'times': 100}
 * Building the graph of function and its approximation
 * Nodes' number: 120.
10.11.2020 22:31:31 | The graph was built in 6.2 seconds.
10.11.2020 22:31:33 | The graph was built in 2.7e+01 seconds.
10.11.2020 22:32:02 | Building the graph with following parameters:
 * function: <function build.<locals>.<lambda> at 0x00000258EF18F0D0>
 * Defined on (-10, 10)
 * Using `<function lagrange_polynomial at 0x00000258EF1935E0>` for approximation
 * Forming args as `(chebyshev_nodes(*xborders, nodes_n),)`
 * Build parameters: {'borders': 1, 'times': 100}
 * Building the graph of function and its approximation
 * Nodes' number: 100.
10.11.2020 22:32:07 | The graph was built in 4.8 seconds.
10.11.2020 22:32:07 | While building graph: error: __init__() got an unexpected keyword argument 'alpha'
10.11.2020 22:36:38 | Building the graph with following parameters:
 * function: <function build.<locals>.<lambda> at 0x000002A62E641280>
 * Defined on (-10, 10)
 * Using `<function lagrange_polynomial at 0x000002A62E637790>` for approximation
 * Forming args as `(chebyshev_nodes(*xborders, nodes_n),)`
 * Build parameters: {'borders': 1, 'times': 100}
 * Building the graph of function and its approximation
 * Nodes' number: 30.
10.11.2020 22:36:39 | The graph was built in 0.42 seconds.
10.11.2020 22:37:28 | Building the graph with following parameters:
 * function: <function build.<locals>.<lambda> at 0x0000020D6482F0D0>
 * Defined on (-10, 10)
 * Using `<function lagrange_polynomial at 0x0000020D648335E0>` for approximation
 * Forming args as `(chebyshev_nodes(*xborders, nodes_n),)`
 * Build parameters: {'borders': 1, 'times': 100}
 * Building the graph of function and its approximation
 * Nodes' number: 30.
10.11.2020 22:37:29 | The graph was built in 0.53 seconds.
10.11.2020 22:37:49 | Building the graph with following parameters:
 * function: <function build.<locals>.<lambda> at 0x0000020D67963CA0>
 * Defined on (-10, 10)
 * Using `<function lagrange_polynomial at 0x0000020D648335E0>` for approximation
 * Forming args as `(chebyshev_nodes(*xborders, nodes_n),)`
 * Build parameters: {'borders': 1, 'times': 100}
 * Building the graph of function and its approximation
 * Nodes' number: 30.
10.11.2020 22:37:49 | The graph was built in 0.51 seconds.
10.11.2020 22:38:09 | Building the table with following parameters:
 * Function: abs(x)
 * Defined on (-10, 10)
 * Using `newton_polynomial_forward_equidistant` for approximation
 * Nodes' number: 30.
 * Alpha: 0.5.
10.11.2020 22:38:23 | Building the graph with following parameters:
 * function: <function build.<locals>.<lambda> at 0x0000020D6482FC10>
 * Defined on (-10, 10)
 * Using `<function lagrange_polynomial at 0x0000020D648335E0>` for approximation
 * Forming args as `(chebyshev_nodess(*xborders, nodes_n),)`
 * Build parameters: {'borders': 1, 'times': 100}
 * Building the graph of function and its approximation
 * Nodes' number: 30.
10.11.2020 22:38:23 | While building graph: error: name 'chebyshev_nodess' is not defined
10.11.2020 22:39:10 | Building the graph with following parameters:
 * function: <function build.<locals>.<lambda> at 0x000002B8FC77A0D0>
 * Defined on (-10, 10)
 * Using `<function lagrange_polynomial at 0x000002B8FC7745E0>` for approximation
 * Forming args as `(chebyshev_nodesa(*xborders, nodes_n),)`
 * Build parameters: {'borders': 1, 'times': 100}
 * Building the graph of function and its approximation
 * Nodes' number: 30.
10.11.2020 22:39:10 | While building graph: error: name 'chebyshev_nodesa' is not defined
10.11.2020 22:39:15 | Building the graph with following parameters:
 * function: <function build.<locals>.<lambda> at 0x000002B8FC77A0D0>
 * Defined on (-10, 10)
 * Using `<function lagrange_polynomial at 0x000002B8FC7745E0>` for approximation
 * Forming args as `(chebyshev_nodes(*xborders, nodes_n),)`
 * Build parameters: {'borders': 1, 'times': 100}
 * Building the graph of function and its approximation
 * Nodes' number: 30.
10.11.2020 22:39:15 | The graph was built in 0.57 seconds.
10.11.2020 22:39:27 | Building the table with following parameters:
 * Function: abs(x)
 * Defined on (-10, 10)
 * Using `lagrange_polynomial` for approximation
 * Nodes' number: 150.
 * Alpha: 0.5.
10.11.2020 22:39:52 | The table was built in 2.5e+01 seconds.
10.11.2020 22:41:05 | Building the graph with following parameters:
 * function: <function build.<locals>.<lambda> at 0x0000021277F6A0D0>
 * Defined on (-10, 10)
 * Using `<function lagrange_polynomial at 0x0000021277F645E0>` for approximation
 * Forming args as `(chebyshev_nodes(*xborders, nodes_n),)`
 * Build parameters: {'borders': 1, 'times': 100}
 * Building the graph of function and its approximation
 * Nodes' number: 150.
10.11.2020 22:41:10 | The graph was built in 4.8 seconds.
10.11.2020 22:41:30 | Building the graph with following parameters:
 * function: <function build.<locals>.<lambda> at 0x0000011FE815C0D0>
 * Defined on (-10, 10)
 * Using `<function lagrange_polynomial at 0x0000011FE81635E0>` for approximation
 * Forming args as `(chebyshev_nodes(*xborders, nodes_n),)`
 * Build parameters: {'borders': 1, 'times': 100}
 * Building the graph of function and its approximation
 * Nodes' number: 120.
10.11.2020 22:41:33 | The graph was built in 3.2 seconds.
10.11.2020 22:42:22 | Building the table with following parameters:
 * Function: abs(x)
 * Defined on (-10, 10)
 * Using `lagrange_polynomial` for approximation
 * Nodes' number: 30.
 * Alpha: 0.5.
10.11.2020 22:42:24 | The table was built in 1.5 seconds.
10.11.2020 22:48:47 | Building the graph with following parameters:
 * function: <function build.<locals>.<lambda> at 0x0000022CFA30D0D0>
 * Defined on (-10, 10)
 * Using `<function lagrange_polynomial at 0x0000022CFA3145E0>` for approximation
 * Forming args as `(chebyshev_nodes(*xborders, nodes_n),)`
 * Build parameters: {'borders': 1, 'times': 100}
 * Building the graph of function and its approximation
 * Nodes' number: 30.
10.11.2020 22:48:47 | The graph was built in 0.57 seconds.
10.11.2020 22:49:21 | Building the table with following parameters:
 * Function: abs(x)
 * Defined on (-10, 10)
 * Using `lagrange_polynomial` for approximation
 * Nodes' number: 30.
 * Alpha: 0.5.
10.11.2020 22:49:23 | The table was built in 1.45 seconds.
10.11.2020 22:49:33 | Building the graph with following parameters:
 * function: <function build.<locals>.<lambda> at 0x000001F9CEE470D0>
 * Defined on (-10, 10)
 * Using `<function lagrange_polynomial at 0x000001F9CEE17790>` for approximation
 * Forming args as `(chebyshev_nodesa(*xborders, nodes_n),)`
 * Build parameters: {'borders': 1, 'times': 100}
 * Building the graph of function and its approximation
 * Nodes' number: 30.
10.11.2020 22:49:33 | While building graph: error: name 'chebyshev_nodesa' is not defined
10.11.2020 22:49:43 | Building the graph with following parameters:
 * function: <function build.<locals>.<lambda> at 0x000001F9CEE470D0>
 * Defined on (-10, 10)
 * Using `<function lagrange_polynomial at 0x000001F9CEE17790>` for approximation
 * Forming args as `(chebyshev_nodes(*xborders, nodes_n),)`
 * Build parameters: {'borders': 1, 'times': 100}
 * Building the graph of function and its approximation
 * Nodes' number: 120.
10.11.2020 22:49:46 | The graph was built in 2.49 seconds.
10.11.2020 22:49:53 | Building the graph with following parameters:
 * function: <function build.<locals>.<lambda> at 0x000001F9D45A78B0>
 * Defined on (-10, 10)
 * Using `<function lagrange_polynomial at 0x000001F9CEE17790>` for approximation
 * Forming args as `(chebyshev_nodes(*xborders, nodes_n),)`
 * Build parameters: {'borders': 1, 'times': 100}
 * Building the graph of function and its approximation
 * Nodes' number: 120.
10.11.2020 22:49:56 | The graph was built in 2.59 seconds.
10.11.2020 22:50:02 | Building the table with following parameters:
 * Function: abs(x)
 * Defined on (-10, 10)
 * Using `lagrange_polynomial` for approximation
 * Nodes' number: 120.
 * Alpha: 0.5.
10.11.2020 22:50:22 | The table was built in 20.12 seconds.
10.11.2020 23:13:28 | Building the table with following parameters:
 * Function: abs(x)
 * Defined on (-10, 10)
 * Using `lagrange_polynomial` for approximation
 * Nodes' number: 120.
 * Alpha: 0.5.
10.11.2020 23:13:33 | The table was built in 4.72 seconds.
10.11.2020 23:13:49 | Building the graph with following parameters:
 * function: <function build.<locals>.<lambda> at 0x000002894C15C0D0>
 * Defined on (-10, 10)
 * Using `<function lagrange_polynomial at 0x000002894C1565E0>` for approximation
 * Forming args as `(chebyshev_nodes(*xborders, nodes_n),)`
 * Build parameters: {'borders': 1, 'times': 100}
 * Building the graph of function and its approximation
 * Nodes' number: 30.
10.11.2020 23:13:50 | The graph was built in 0.51 seconds.
11.11.2020 09:00:52 | Building the table with following parameters:
 * Function: abs(x)
 * Defined on (-10, 10)
 * Using `lagrange_polynomial` for approximation
 * Nodes' number: 30.
 * Alpha: 0.5.
11.11.2020 09:00:54 | The table was built in 1.74 seconds.
11.11.2020 09:01:00 | Building the graph with following parameters:
 * function: <function build.<locals>.<lambda> at 0x000002479B1FAEE0>
 * Defined on (-10, 10)
 * Using `<function lagrange_polynomial at 0x000002479B1645E0>` for approximation
 * Forming args as `(chebyshev_nodes(*xborders, nodes_n),)`
 * Build parameters: {'borders': 1, 'times': 100}
 * Building the graph of function and its approximation
 * Nodes' number: 30.
11.11.2020 09:01:01 | The graph was built in 0.68 seconds.
11.11.2020 14:03:15 | Building the graph with following parameters:
 * function: <function build.<locals>.<lambda> at 0x0000020A56B1D160>
 * Defined on (-10, 10)
 * Using `<function lagrange_polynomial at 0x0000020A56B245E0>` for approximation
 * Forming args as `(chebyshev_nodes(*xborders, nodes_n),)`
 * Build parameters: {'borders': 1, 'times': 100}
 * Building the graph of function and its approximation
 * Nodes' number: 30.
11.11.2020 14:03:15 | While building graph: error: name 'abss' is not defined
11.11.2020 15:58:07 | Building the table with following parameters:
 * Function: abs(x)
 * Defined on (-10, 10)
 * Using `lagrange_polynomial` for approximation
 * Nodes' number: 30.
 * Alpha: 0.5.
11.11.2020 15:58:12 | The table was built in 4.28 seconds.
11.11.2020 15:59:35 | Building the graph with following parameters:
 * function: <function build.<locals>.<lambda> at 0x000001E9BBC4E1F0>
 * Defined on (-10, 10)
 * Using `<function lagrange_polynomial at 0x000001E9BBC555E0>` for approximation
 * Forming args as `(chebyshev_nodes(*xborders, nodes_n),)`
 * Build parameters: {'borders': 1, 'times': 100}
 * Building the graph of function and its approximation
 * Nodes' number: 30.
11.11.2020 15:59:36 | The graph was built in 0.56 seconds.
11.11.2020 15:59:42 | Building the table with following parameters:
 * Function: abs(x)
 * Defined on (-10, 10)
 * Using `lagrange_polynomial` for approximation
 * Nodes' number: 30.
 * Alpha: 0.5.
11.11.2020 16:01:41 | Building the table with following parameters:
 * Function: abs(x)
 * Defined on (-10, 10)
 * Using `lagrange_polynomial` for approximation
 * Nodes' number: 30.
 * Alpha: 0.5.
11.11.2020 16:01:50 | The table was built in 8.99 seconds.
11.11.2020 16:07:12 | Building the table with following parameters:
 * Function: abs(x)
 * Defined on (-10, 10)
 * Using `lagrange_polynomial` for approximation
 * Nodes' number: 30.
 * Alpha: 0.5.
11.11.2020 16:07:14 | The table was built in 1.48 seconds.
11.11.2020 16:08:32 | Building the table with following parameters:
 * Function: abs(x)
 * Defined on (-10, 10)
 * Using `lagrange_polynomial` for approximation
 * Nodes' number: 30.
 * Alpha: 0.5.
11.11.2020 16:08:33 | The table was built in 1.50 seconds.
11.11.2020 16:12:02 | Building the table with following parameters:
 * Function: abs(x)
 * Defined on (-10, 10)
 * Using `lagrange_polynomial` for approximation
 * Nodes' number: 30.
 * Alpha: 0.5.
11.11.2020 16:12:04 | The table was built in 1.58 seconds.
11.11.2020 16:12:31 | Building the table with following parameters:
 * Function: abs(x)
 * Defined on (-10, 10)
 * Using `lagrange_polynomial` for approximation
 * Nodes' number: 30.
 * Alpha: 0.5.
11.11.2020 16:14:00 | Building the table with following parameters:
 * Function: abs(x)
 * Defined on (-10, 10)
 * Using `lagrange_polynomial` for approximation
 * Nodes' number: 30.
 * Alpha: 0.5.
11.11.2020 16:14:12 | Building the table with following parameters:
 * Function: abs(x)
 * Defined on (-10, 10)
 * Using `lagrange_polynomial` for approximation
 * Nodes' number: 40.
 * Alpha: 0.5.
11.11.2020 16:16:12 | Building the table with following parameters:
 * Function: abs(x)
 * Defined on (-10, 10)
 * Using `lagrange_polynomial` for approximation
 * Nodes' number: 30.
 * Alpha: 0.5.
11.11.2020 16:16:14 | The table was built in 1.63 seconds.
11.11.2020 16:16:19 | Building the table with following parameters:
 * Function: abs(x)
 * Defined on (-10, 10)
 * Using `lagrange_polynomial` for approximation
 * Nodes' number: 30.
 * Alpha: 0.5.
11.11.2020 16:16:20 | The table's build was interrupted.
11.11.2020 16:16:23 | Building the table with following parameters:
 * Function: abs(x)
 * Defined on (-10, 10)
 * Using `lagrange_polynomial` for approximation
 * Nodes' number: 30.
 * Alpha: 0.5.
11.11.2020 16:16:24 | The table's build was interrupted.
11.11.2020 16:16:48 | Building the table with following parameters:
 * Function: abs(x)
 * Defined on (-10, 10)
 * Using `lagrange_polynomial` for approximation
 * Nodes' number: 30.
 * Alpha: 0.5.
11.11.2020 16:16:49 | The table's build was interrupted.
11.11.2020 16:16:56 | Building the table with following parameters:
 * Function: abs(x)
 * Defined on (-10, 10)
 * Using `lagrange_polynomial` for approximation
 * Nodes' number: 40.
 * Alpha: 0.5.
11.11.2020 16:16:57 | The table's build was interrupted.
11.11.2020 16:17:25 | Building the table with following parameters:
 * Function: abs(x)
 * Defined on (-10, 10)
 * Using `lagrange_polynomial` for approximation
 * Nodes' number: 40.
 * Alpha: 0.5.
11.11.2020 16:17:26 | The table's build was interrupted.
11.11.2020 16:17:30 | Building the table with following parameters:
 * Function: abs(x)
 * Defined on (-10, 10)
 * Using `lagrange_polynomial` for approximation
 * Nodes' number: 40.
 * Alpha: 0.5.
11.11.2020 16:17:32 | The table's build was interrupted.
11.11.2020 16:18:40 | Building the table with following parameters:
 * Function: abs(x)
 * Defined on (-10, 10)
 * Using `lagrange_polynomial` for approximation
 * Nodes' number: 70.
 * Alpha: 0.5.
11.11.2020 16:18:43 | The table's build was interrupted.
11.11.2020 16:21:38 | Building the table with following parameters:
 * Function: abs(x)
 * Defined on (-10, 10)
 * Using `lagrange_polynomial` for approximation
 * Nodes' number: 70.
 * Alpha: 0.5.
11.11.2020 16:21:45 | The table was built in 6.63 seconds.
11.11.2020 16:22:05 | Building the table with following parameters:
 * Function: abs(x)
 * Defined on (-10, 10)
 * Using `lagrange_polynomial` for approximation
 * Nodes' number: 70.
 * Alpha: 0.5.
11.11.2020 16:22:07 | The table's build was interrupted.
11.11.2020 16:22:53 | Building the table with following parameters:
 * Function: abs(x)
 * Defined on (-10, 10)
 * Using `lagrange_polynomial` for approximation
 * Nodes' number: 70.
 * Alpha: 0.5.
11.11.2020 16:22:56 | The table's build was interrupted.
11.11.2020 16:23:08 | Building the table with following parameters:
 * Function: abs(x)
 * Defined on (-10, 10)
 * Using `lagrange_polynomial` for approximation
 * Nodes' number: 70.
 * Alpha: 0.5.
11.11.2020 16:23:10 | The table's build was interrupted.
11.11.2020 16:23:19 | Building the table with following parameters:
 * Function: abs(x)
 * Defined on (-10, 10)
 * Using `lagrange_polynomial` for approximation
 * Nodes' number: 70.
 * Alpha: 0.5.
11.11.2020 16:23:50 | Building the table with following parameters:
 * Function: abs(x)
 * Defined on (-10, 10)
 * Using `lagrange_polynomial` for approximation
 * Nodes' number: 70.
 * Alpha: 0.5.
11.11.2020 16:23:52 | The table's build was interrupted.
11.11.2020 16:23:57 | Building the table with following parameters:
 * Function: abs(x)
 * Defined on (-10, 10)
 * Using `lagrange_polynomial` for approximation
 * Nodes' number: 70.
 * Alpha: 0.5.
11.11.2020 16:23:59 | The table's build was interrupted.
11.11.2020 16:24:02 | Building the table with following parameters:
 * Function: abs(x)
 * Defined on (-10, 10)
 * Using `lagrange_polynomial` for approximation
 * Nodes' number: 70.
 * Alpha: 0.5.
11.11.2020 16:24:04 | The table's build was interrupted.
11.11.2020 16:24:11 | Building the table with following parameters:
 * Function: abs(x)
 * Defined on (-10, 10)
 * Using `lagrange_polynomial` for approximation
 * Nodes' number: 120.
 * Alpha: 0.5.
11.11.2020 16:24:15 | The table's build was interrupted.
11.11.2020 16:25:31 | Building the table with following parameters:
 * Function: abs(x)
 * Defined on (-10, 10)
 * Using `lagrange_polynomial` for approximation
 * Nodes' number: 120.
 * Alpha: 0.5.
11.11.2020 16:25:43 | Building the table with following parameters:
 * Function: abs(x)
 * Defined on (-10, 10)
 * Using `lagrange_polynomial` for approximation
 * Nodes' number: 30.
 * Alpha: 0.5.
11.11.2020 16:25:44 | The table was built in 1.42 seconds.
11.11.2020 16:26:30 | Building the table with following parameters:
 * Function: abs(x)
 * Defined on (-10, 10)
 * Using `lagrange_polynomial` for approximation
 * Nodes' number: 120.
 * Alpha: 0.5.
11.11.2020 16:26:44 | The table was built in 13.93 seconds.
11.11.2020 16:28:30 | Building the table with following parameters:
 * Function: abs(x)
 * Defined on (-10, 10)
 * Using `lagrange_polynomial` for approximation
 * Nodes' number: 30.
 * Alpha: 0.5.
11.11.2020 16:28:32 | The table was built in 1.44 seconds.
11.11.2020 16:28:52 | Building the table with following parameters:
 * Function: abs(x)
 * Defined on (-10, 10)
 * Using `lagrange_polynomial` for approximation
 * Nodes' number: 30.
 * Alpha: 0.5.
11.11.2020 16:28:54 | The table was built in 1.48 seconds.
11.11.2020 16:29:25 | Building the table with following parameters:
 * Function: abs(x)
 * Defined on (-10, 10)
 * Using `lagrange_polynomial` for approximation
 * Nodes' number: 70.
 * Alpha: 0.5.
11.11.2020 16:29:38 | Building the table with following parameters:
 * Function: abs(x)
 * Defined on (-10, 10)
 * Using `lagrange_polynomial` for approximation
 * Nodes' number: 30.
 * Alpha: 0.5.
11.11.2020 16:29:40 | The table was built in 1.43 seconds.
11.11.2020 16:30:02 | Building the table with following parameters:
 * Function: abs(x)
 * Defined on (-10, 10)
 * Using `lagrange_polynomial` for approximation
 * Nodes' number: 30.
 * Alpha: 0.5.
11.11.2020 16:30:04 | The table was built in 1.48 seconds.
11.11.2020 16:55:25 | Building the table with following parameters:
 * Function: abs(x)
 * Defined on (-10, 10)
 * Using `lagrange_polynomial` for approximation
 * Nodes' number: 30.
 * Alpha: 0.5.
11.11.2020 16:55:50 | Building the table with following parameters:
 * Function: abs(x)
 * Defined on (-10, 10)
 * Using `lagrange_polynomial` for approximation
 * Nodes' number: 30.
 * Alpha: 0.5.
11.11.2020 16:55:52 | The table was built in 1.48 seconds.
11.11.2020 16:57:37 | Building the table with following parameters:
 * Function: abs(x)
 * Defined on (-10, 10)
 * Using `lagrange_polynomial` for approximation
 * Nodes' number: 30.
 * Alpha: 0.5.
11.11.2020 16:57:39 | The table was built in 1.48 seconds.
11.11.2020 16:57:53 | Building the table with following parameters:
 * Function: abs(x)
 * Defined on (-10, 10)
 * Using `lagrange_polynomial` for approximation
 * Nodes' number: 30.
 * Alpha: 0.5.
11.11.2020 16:57:55 | The table was built in 1.48 seconds.
11.11.2020 16:58:10 | Building the table with following parameters:
 * Function: abs(x)
 * Defined on (-10, 10)
 * Using `lagrange_polynomial` for approximation
 * Nodes' number: 30.
 * Alpha: 0.5.
11.11.2020 16:58:12 | The table was built in 1.52 seconds.
11.11.2020 16:58:20 | Building the table with following parameters:
 * Function: abs(x)
 * Defined on (-10, 10)
 * Using `lagrange_polynomial` for approximation
 * Nodes' number: 30.
 * Alpha: 0.5.
11.11.2020 16:58:22 | The table was built in 1.48 seconds.
11.11.2020 16:59:56 | Building the table with following parameters:
 * Function: abs(x)
 * Defined on (-10, 10)
 * Using `lagrange_polynomial` for approximation
 * Nodes' number: 30.
 * Alpha: 0.5.
11.11.2020 16:59:58 | The table was built in 1.46 seconds.
11.11.2020 17:00:02 | Building the table with following parameters:
 * Function: abs(x)
 * Defined on (-10, 10)
 * Using `lagrange_polynomial` for approximation
 * Nodes' number: 30.
 * Alpha: 0.5.
11.11.2020 17:00:04 | The table was built in 1.49 seconds.
11.11.2020 17:00:11 | Building the table with following parameters:
 * Function: abs(x)
 * Defined on (-10, 10)
 * Using `lagrange_polynomial` for approximation
 * Nodes' number: 120.
 * Alpha: 0.5.
11.11.2020 17:00:25 | Build of the table was interrupted.
11.11.2020 17:02:44 | Building the table with following parameters:
 * Function: abs(x)
 * Defined on (-10, 10)
 * Using `newton_polynomial_forward` for approximation
 * Nodes' number: 30.
 * Alpha: 0.5.
11.11.2020 17:02:45 | The table was built in 1.28 seconds.
11.11.2020 17:03:00 | Building the table with following parameters:
 * Function: abs(x)
 * Defined on (-10, 10)
 * Using `lagrange_polynomial` for approximation
 * Nodes' number: 30.
 * Alpha: 0.5.
11.11.2020 17:03:01 | The table was built in 1.44 seconds.
11.11.2020 17:03:34 | Building the table with following parameters:
 * Function: abs(x)
 * Defined on (-10, 10)
 * Using `newton_polynomial_forward_equidistant` for approximation
 * Nodes' number: 30.
 * Alpha: 0.5.
11.11.2020 17:03:46 | Building the graph with following parameters:
 * function: <function build.<locals>.<lambda> at 0x000002622CA8F310>
 * Defined on (-10, 10)
 * Using `<function newton_polynomial_forward_equidistant at 0x000002622C9044C0>` for approximation
 * Forming args as `(-10, 10, 30)`
 * Build parameters: {'borders': 1, 'times': 100}
 * Building the graph of function and its approximation
 * Nodes' number: 30.
11.11.2020 17:03:46 | While building graph: error: name 'abss' is not defined
11.11.2020 17:03:52 | Building the graph with following parameters:
 * function: <function build.<locals>.<lambda> at 0x000002622CA8F310>
 * Defined on (-10, 10)
 * Using `<function newton_polynomial_forward_equidistant at 0x000002622C9044C0>` for approximation
 * Forming args as `(-10, 10, 30)`
 * Build parameters: {'borders': 1, 'times': 100}
 * Building the graph of function and its approximation
 * Nodes' number: 30.
11.11.2020 17:24:24 | Building the graph with following parameters:
 * function: <function build.<locals>.<lambda> at 0x000001B30988D1F0>
 * Defined on (-10, 10)
 * Using `<function lagrange_polynomial at 0x000001B3098955E0>` for approximation
 * Forming args as `(chebyshev_nodes(*xborders, nodes_n),)`
 * Build parameters: {'borders': 1, 'times': 100}
 * Building the graph of function and its approximation
 * Nodes' number: 30.
11.11.2020 17:24:24 | The graph was built in 0.52 seconds.
11.11.2020 17:26:23 | While building graph: errorunexpected EOF while parsing (<string>, line 1)
11.11.2020 17:27:23 | While building table: error: invalid literal for int() with base 10: '3d'
11.11.2020 17:28:10 | While building table: error: invalid literal for int() with base 10: '.0'
11.11.2020 17:28:17 | Building the graph with following parameters:
 * function: <function build.<locals>.<lambda> at 0x0000019AF4FD11F0>
 * Defined on (-10, 10)
 * Using `<function lagrange_polynomial at 0x0000019AF4FD65E0>` for approximation
 * Forming args as `(chebyshev_nodes(*xborders, nodes_n),)`
 * Build parameters: {'borders': 1, 'times': 100}
 * Building the graph of function and its approximation
 * Nodes' number: 0.
11.11.2020 17:28:17 | The graph was built in 0.26 seconds.
11.11.2020 17:28:24 | While building graph: error: invalid literal for int() with base 10: '='
11.11.2020 17:34:33 | Building the table with following parameters:
 * Function: abs(x)
 * Defined on (-10, 10)
 * Using `lagrange_polynomial` for approximation
 * Nodes' number: 30.
 * Alpha: 0.5.
11.11.2020 17:34:34 | The table was built in 1.48 seconds.
11.11.2020 17:35:56 | While building table: error: invalid literal for int() with base 10: '3a'
11.11.2020 17:37:24 | Building the graph with following parameters:
 * function: <function build.<locals>.<lambda> at 0x0000013E2D39C280>
 * Defined on (-10, 10)
 * Using `<function lagrange_polynomial at 0x0000013E2D3965E0>` for approximation
 * Forming args as `(chebyshev_nodes(*xborders, nodes_n),)`
 * Build parameters: {'borders': 0.9, 'times': 100}
 * Building the graph of function and its approximation
 * Nodes' number: 30.
11.11.2020 17:37:25 | The graph was built in 0.45 seconds.
11.11.2020 17:37:35 | Building the graph with following parameters:
 * function: <function build.<locals>.<lambda> at 0x0000013E2D39C4C0>
 * Defined on (-10, 10)
 * Using `<function lagrange_polynomial at 0x0000013E2D3965E0>` for approximation
 * Forming args as `(chebyshev_nodes(*xborders, nodes_n),)`
 * Build parameters: {'borders': 2, 'times': 100}
 * Building the graph of function and its approximation
 * Nodes' number: 30.
11.11.2020 17:37:36 | The graph was built in 0.20 seconds.
11.11.2020 17:37:40 | Building the graph with following parameters:
 * function: <function build.<locals>.<lambda> at 0x0000013E2D39C4C0>
 * Defined on (-10, 10)
 * Using `<function lagrange_polynomial at 0x0000013E2D3965E0>` for approximation
 * Forming args as `(chebyshev_nodes(*xborders, nodes_n),)`
 * Build parameters: {'borders': 1.2, 'times': 100}
 * Building the graph of function and its approximation
 * Nodes' number: 30.
11.11.2020 17:37:41 | The graph was built in 0.26 seconds.
11.11.2020 17:37:45 | Building the graph with following parameters:
 * function: <function build.<locals>.<lambda> at 0x0000013E2D39C820>
 * Defined on (-10, 10)
 * Using `<function lagrange_polynomial at 0x0000013E2D3965E0>` for approximation
 * Forming args as `(chebyshev_nodes(*xborders, nodes_n),)`
 * Build parameters: {'borders': 1.2, 'times': 100}
 * Building the graph of function and its approximation
 * Nodes' number: 30.
11.11.2020 17:37:45 | The graph was built in 0.54 seconds.
11.11.2020 17:37:55 | Building the graph with following parameters:
 * function: <function build.<locals>.<lambda> at 0x0000013E306A0F70>
 * Defined on (-10, 10)
 * Using `<function lagrange_polynomial at 0x0000013E2D3965E0>` for approximation
 * Forming args as `(chebyshev_nodes(*xborders, nodes_n),)`
 * Build parameters: {'borders': 1.05, 'times': 100}
 * Building the graph of function and its approximation
 * Nodes' number: 30.
11.11.2020 17:37:56 | The graph was built in 0.46 seconds.
11.11.2020 17:38:06 | Building the graph with following parameters:
 * function: <function build.<locals>.<lambda> at 0x0000013E304E7F70>
 * Defined on (-10, 10)
 * Using `<function lagrange_polynomial at 0x0000013E2D3965E0>` for approximation
 * Forming args as `(chebyshev_nodes(*xborders, nodes_n),)`
 * Build parameters: {'borders': 1.02, 'times': 100}
 * Building the graph of function and its approximation
 * Nodes' number: 30.
11.11.2020 17:38:06 | The graph was built in 0.49 seconds.
11.11.2020 18:12:32 | Building the table with following parameters:
 * Function: abs(x)
 * Defined on (-10, 10)
 * Using `lagrange_polynomial` for approximation
 * Nodes' number: 30.
 * Alpha: 0.5.
11.11.2020 18:12:34 | The table was built in 1.48 seconds.
11.11.2020 18:14:15 | Building the table with following parameters:
 * Function: abs(x)
 * Defined on (-10, 10)
 * Using `lagrange_polynomial` for approximation
 * Nodes' number: 30.
 * Alpha: None.
11.11.2020 18:14:16 | The table was built in 1.48 seconds.
11.11.2020 18:16:44 | Building the table with following parameters:
 * Function: abs(x)
 * Defined on (-10, 10)
 * Using `lagrange_polynomial` for approximation
 * Nodes' number: 30.
 * Alpha: 0.5.
11.11.2020 18:16:45 | The table was built in 1.46 seconds.
11.11.2020 18:16:55 | Building the table with following parameters:
 * Function: abs(x)
 * Defined on (-10, 10)
 * Using `lagrange_polynomial` for approximation
 * Nodes' number: 30.
 * Alpha: None.
11.11.2020 18:16:56 | The table was built in 1.43 seconds.
11.11.2020 18:17:09 | Building the table with following parameters:
 * Function: abs(x)
 * Defined on (-10, 10)
 * Using `lagrange_polynomial` for approximation
 * Nodes' number: 30.
 * Alpha: 0.5.
11.11.2020 18:17:11 | The table was built in 1.47 seconds.
11.11.2020 18:22:32 | Building the graph with following parameters:
 * function: <function build.<locals>.<lambda> at 0x000001D6FB92A280>
 * Defined on (-10, 10)
 * Using `<function lagrange_polynomial at 0x000001D6FB9255E0>` for approximation
 * Forming args as `(chebyshev_nodes(*xborders, nodes_n),)`
 * Build parameters: {'borders': 1, 'times': 100}
 * Building the graph of function and its approximation
 * Nodes' number: 30.
11.11.2020 18:22:32 | The graph was built in 0.53 seconds.
11.11.2020 18:31:05 | Building the graph with following parameters:
 * function: <function build.<locals>.<lambda> at 0x000002843645B310>
 * Defined on (-10, 10)
 * Using `<function lagrange_polynomial at 0x0000028436455670>` for approximation
 * Forming args as `(chebyshev_nodes(*xborders, nodes_n),)`
 * Build parameters: {'times': 10, 'borders': 1}
 * Building the graph of function and its approximation
 * Nodes' number: 30.
11.11.2020 18:31:05 | The graph was built in 0.29 seconds.
11.11.2020 18:31:23 | Building the graph with following parameters:
 * function: <function build.<locals>.<lambda> at 0x0000028439593EE0>
 * Defined on (-10, 10)
 * Using `<function lagrange_polynomial at 0x0000028436455670>` for approximation
 * Forming args as `(chebyshev_nodes(*xborders, nodes_n),)`
 * Build parameters: {'times': 10, 'borders': 1}
 * Building the graph of function and its approximation
 * Nodes' number: 30.
11.11.2020 18:31:23 | The graph was built in 0.52 seconds.
11.11.2020 18:31:37 | Building the graph with following parameters:
 * function: <function build.<locals>.<lambda> at 0x00000284396F6E50>
 * Defined on (-10, 10)
 * Using `<function lagrange_polynomial at 0x0000028436455670>` for approximation
 * Forming args as `(chebyshev_nodes(*xborders, nodes_n),)`
 * Build parameters: {'times': 30, 'borders': 1}
 * Building the graph of function and its approximation
 * Nodes' number: 30.
11.11.2020 18:31:38 | The graph was built in 0.51 seconds.
11.11.2020 18:50:11 | Building the graph with following parameters:
 * function: <function build.<locals>.<lambda> at 0x0000021FCC7DA310>
 * Defined on (-10, 10)
 * Using `<function lagrange_polynomial at 0x0000021FCC7D5670>` for approximation
 * Forming args as `(chebyshev_nodes(*xborders, nodes_n),)`
 * Build parameters: {'borders': 1, 'times': 100}
 * Building the graph of function and its approximation
 * Nodes' number: 30.
11.11.2020 18:50:12 | The graph was built in 0.55 seconds.
11.11.2020 18:53:07 | Building the table with following parameters:
 * Function: abs(x)
 * Defined on (-10, 10)
 * Using `lagrange_polynomial` for approximation
 * Nodes' number: 30.
 * Alpha: 0.5.
11.11.2020 18:53:09 | The table was built in 1.46 seconds.
11.11.2020 18:53:22 | Building the table with following parameters:
 * Function: abs(x)
 * Defined on (-10, 10)
 * Using `lagrange_polynomial` for approximation
 * Nodes' number: 30.
 * Alpha: 0.5.
11.11.2020 18:53:23 | The table was built in 1.55 seconds.
11.11.2020 18:53:49 | Building the table with following parameters:
 * Function: abs(x)
 * Defined on (-10, 10)
 * Using `lagrange_polynomial` for approximation
 * Nodes' number: 30.
 * Alpha: 0.5.
11.11.2020 18:53:51 | The table was built in 1.51 seconds.
11.11.2020 18:54:05 | Building the table with following parameters:
 * Function: abs(x)
 * Defined on (-10, 10)
 * Using `lagrange_polynomial` for approximation
 * Nodes' number: 30.
 * Alpha: 0.5.
11.11.2020 18:54:07 | The table was built in 1.48 seconds.
11.11.2020 18:54:54 | Building the table with following parameters:
 * Function: abs(x)
 * Defined on (-10, 10)
 * Using `lagrange_polynomial` for approximation
 * Nodes' number: 30.
 * Alpha: 0.5.
11.11.2020 18:54:55 | The table was built in 1.45 seconds.
11.11.2020 18:55:37 | Building the table with following parameters:
 * Function: abs(x)
 * Defined on (-10, 10)
 * Using `lagrange_polynomial` for approximation
 * Nodes' number: 30.
 * Alpha: 0.5.
11.11.2020 18:55:38 | The table was built in 1.45 seconds.
11.11.2020 18:55:46 | Building the table with following parameters:
 * Function: abs(x)
 * Defined on (-10, 10)
 * Using `lagrange_polynomial` for approximation
 * Nodes' number: 70.
 * Alpha: 0.5.
11.11.2020 18:55:52 | The table was built in 6.00 seconds.
11.11.2020 19:28:14 | Building the graph with following parameters:
 * function: <function build.<locals>.<lambda> at 0x00000249BEFBA4C0>
 * Defined on (-10, 10)
 * Using `<function lagrange_polynomial at 0x00000249BEFAD700>` for approximation
 * Forming args as `(chebyshev_nodes(*xborders, nodes_n),)`
 * Build parameters: {'borders': 1, 'times': 100}
 * Building the graph of function and its approximation
 * Nodes' number: 30.
11.11.2020 19:28:17 | Building the graph with following parameters:
 * function: <function build.<locals>.<lambda> at 0x00000249BEFBAA60>
 * Defined on (-10, 10)
 * Using `<function lagrange_polynomial at 0x00000249BEFAD700>` for approximation
 * Forming args as `(chebyshev_nodes(*xborders, nodes_n),)`
 * Build parameters: {'borders': 1, 'times': 100}
 * Building the graph of function and its approximation
 * Nodes' number: 30.
11.11.2020 19:29:31 | Building the graph with following parameters:
 * function: <function build.<locals>.<lambda> at 0x00000249C20FA280>
 * Defined on (-2, 2)
 * Using `<function lagrange_polynomial at 0x00000249BEFAD700>` for approximation
 * Forming args as `(chebyshev_nodes(*xborders, nodes_n),)`
 * Build parameters: {'borders': 1, 'times': 100}
 * Building the graph of function only
 * Nodes' number: 30.
11.11.2020 19:29:31 | While building graph: error: name 'weierstass_function' is not defined
11.11.2020 19:31:37 | Building the graph with following parameters:
 * function: <function build.<locals>.<lambda> at 0x00000249C20FA280>
 * Defined on (-2, 2)
 * Using `<function lagrange_polynomial at 0x00000249BEFAD700>` for approximation
 * Forming args as `(chebyshev_nodes(*xborders, nodes_n),)`
 * Build parameters: {'borders': 1, 'times': 100}
 * Building the graph of function only
 * Nodes' number: 30.
11.11.2020 19:31:37 | While building graph: error: can only concatenate tuple (not "int") to tuple
11.11.2020 19:32:36 | Building the graph with following parameters:
 * function: <function build.<locals>.<lambda> at 0x00000249C20FA280>
 * Defined on (-2, 2)
 * Using `<function lagrange_polynomial at 0x00000249BEFAD700>` for approximation
 * Forming args as `(chebyshev_nodes(*xborders, nodes_n),)`
 * Build parameters: {'borders': 1, 'times': 100}
 * Building the graph of function only
 * Nodes' number: 30.
11.11.2020 19:32:36 | While building graph: error: weierstrass_function() missing 1 required positional argument: 'maxn'
11.11.2020 19:33:08 | The graph was built in 291.15 seconds.
11.11.2020 19:33:12 | The graph was built in 298.45 seconds.
11.11.2020 19:35:15 | Building the graph with following parameters:
 * function: <function build.<locals>.<lambda> at 0x000002144371B4C0>
 * Defined on (-10, 10)
 * Using `<function lagrange_polynomial at 0x000002144370E700>` for approximation
 * Forming args as `(chebyshev_nodes(*xborders, nodes_n),)`
 * Build parameters: {'borders': 1, 'times': 100}
 * Building the graph of function and its approximation
 * Nodes' number: 30.
11.11.2020 19:35:18 | The graph was built in 3.51 seconds.
11.11.2020 19:35:28 | Building the graph with following parameters:
 * function: <function build.<locals>.<lambda> at 0x000001A728A5B4C0>
 * Defined on (-10, 10)
 * Using `<function lagrange_polynomial at 0x000001A728A4E700>` for approximation
 * Forming args as `(chebyshev_nodes(*xborders, nodes_n),)`
 * Build parameters: {'borders': 1, 'times': 100}
 * Building the graph of function and its approximation
 * Nodes' number: 30.
11.11.2020 19:35:28 | While building graph: error: name 'abss' is not defined
11.11.2020 19:37:31 | Building the graph with following parameters:
 * function: <function build.<locals>.<lambda> at 0x0000021AC3A74670>
 * Defined on (-10, 10)
 * Using `<function lagrange_polynomial at 0x0000021AC3A668B0>` for approximation
 * Forming args as `(chebyshev_nodes(*xborders, nodes_n),)`
 * Build parameters: {'borders': 1, 'times': 100}
 * Building the graph of function and its approximation
 * Nodes' number: 30.
11.11.2020 19:37:32 | The graph was built in 0.46 seconds.
11.11.2020 19:39:57 | Building the graph with following parameters:
 * function: <function build.<locals>.<lambda> at 0x00000218A8CC94C0>
 * Defined on (-10, 10)
 * Using `<function lagrange_polynomial at 0x00000218A8CBD700>` for approximation
 * Forming args as `(chebyshev_nodes(*xborders, nodes_n),)`
 * Build parameters: {'borders': 1, 'times': 100}
 * Building the graph of function and its approximation
 * Nodes' number: 30.
11.11.2020 19:40:07 | The graph was built in 10.32 seconds.
11.11.2020 19:46:22 | Building the graph with following parameters:
 * function: <function build.<locals>.<lambda> at 0x000001B97EECB4C0>
 * Defined on (-10, 10)
 * Using `<function lagrange_polynomial at 0x000001B97EEBD700>` for approximation
 * Forming args as `(chebyshev_nodes(*xborders, nodes_n),)`
 * Build parameters: {'borders': 1, 'times': 100}
 * Building the graph of function only
 * Nodes' number: 30.
11.11.2020 19:48:01 | Building the graph with following parameters:
 * function: <function build.<locals>.<lambda> at 0x000002730855A4C0>
 * Defined on (-2, 2)
 * Using `<function lagrange_polynomial at 0x000002730854E700>` for approximation
 * Forming args as `(chebyshev_nodes(*xborders, nodes_n),)`
 * Build parameters: {'borders': 1, 'times': 100}
 * Building the graph of function only
 * Nodes' number: 10.
11.11.2020 19:53:09 | The graph was built in 308.43 seconds.
11.11.2020 19:53:49 | Building the graph with following parameters:
 * function: <function build.<locals>.<lambda> at 0x000002730D6B6CA0>
 * Defined on (-2, 2)
 * Using `<function lagrange_polynomial at 0x000002730854E700>` for approximation
 * Forming args as `(chebyshev_nodes(*xborders, nodes_n),)`
 * Build parameters: {'borders': 1, 'times': 100}
 * Building the graph of approximation only
 * Nodes' number: 10.
11.11.2020 20:47:51 | The graph was built in 3242.44 seconds.
11.11.2020 21:14:27 | Building the graph with following parameters:
 * function: <function build.<locals>.<lambda> at 0x000001AEFCA2A700>
 * Defined on (-10, 10)
 * Using `<function lagrange_polynomial at 0x000001AEFCA1E700>` for approximation
 * Forming args as `(chebyshev_nodes(*xborders, nodes_n),)`
 * Build parameters: {'borders': 1, 'times': 100}
 * Building the graph of function and its approximation
 * Nodes' number: 30.
11.11.2020 21:14:28 | The graph was built in 0.50 seconds.
11.11.2020 21:22:24 | Building the graph with following parameters:
 * function: <function build.<locals>.<lambda> at 0x0000014CF83EC700>
 * Defined on (-2, 2)
 * Using `<function lagrange_polynomial at 0x0000014CF83DF700>` for approximation
 * Forming args as `(chebyshev_nodes(*xborders, nodes_n),)`
 * Build parameters: {'borders': 1, 'times': 100}
 * Building the graph of function and its approximation
 * Nodes' number: 30.
11.11.2020 21:22:24 | While building graph: error: unsupported operand type(s) for *: 'function' and 'float'
11.11.2020 21:22:33 | Building the graph with following parameters:
 * function: <function build.<locals>.<lambda> at 0x0000014CF83EC700>
 * Defined on (-2, 2)
 * Using `<function lagrange_polynomial at 0x0000014CF83DF700>` for approximation
 * Forming args as `(chebyshev_nodes(*xborders, nodes_n),)`
 * Build parameters: {'borders': 1, 'times': 100}
 * Building the graph of function and its approximation
 * Nodes' number: 30.
11.11.2020 21:33:48 | Building the graph with following parameters:
 * function: <function build.<locals>.<lambda> at 0x000002170FDCA700>
 * Defined on (-10, 10)
 * Using `<function lagrange_polynomial at 0x000002170FDBE700>` for approximation
 * Forming args as `(chebyshev_nodes(*xborders, nodes_n),)`
 * Build parameters: {'borders': 1, 'times': 100}
 * Building the graph of function only
 * Nodes' number: 30.
11.11.2020 21:33:57 | The graph was built in 9.57 seconds.
11.11.2020 21:35:30 | Building the graph with following parameters:
 * function: <function build.<locals>.<lambda> at 0x000001DC7F428700>
 * Defined on (-10, 10)
 * Using `<function lagrange_polynomial at 0x000001DC7F41D700>` for approximation
 * Forming args as `(chebyshev_nodes(*xborders, nodes_n),)`
 * Build parameters: {'borders': 1, 'times': 100}
 * Building the graph of function and its approximation
 * Nodes' number: 30.
11.11.2020 21:35:33 | The graph was built in 3.62 seconds.
11.11.2020 21:35:52 | Building the graph with following parameters:
 * function: <function build.<locals>.<lambda> at 0x000001DC7A5BDA60>
 * Defined on (-10, 10)
 * Using `<function lagrange_polynomial at 0x000001DC7F41D700>` for approximation
 * Forming args as `(chebyshev_nodes(*xborders, nodes_n),)`
 * Build parameters: {'borders': 1, 'times': 100}
 * Building the graph of function and its approximation
 * Nodes' number: 30.
11.11.2020 21:35:57 | The graph was built in 5.43 seconds.
11.11.2020 21:36:45 | Building the graph with following parameters:
 * function: <function build.<locals>.<lambda> at 0x0000020FF3827700>
 * Defined on (-10, 10)
 * Using `<function lagrange_polynomial at 0x0000020FF381D700>` for approximation
 * Forming args as `(chebyshev_nodes(*xborders, nodes_n),)`
 * Build parameters: {'borders': 1, 'times': 100}
 * Building the graph of function and its approximation
 * Nodes' number: 30.
11.11.2020 21:37:42 | Building the graph with following parameters:
 * function: <function build.<locals>.<lambda> at 0x0000027732BF7700>
 * Defined on (-10, 10)
 * Using `<function lagrange_polynomial at 0x0000027732BED700>` for approximation
 * Forming args as `(chebyshev_nodes(*xborders, nodes_n),)`
 * Build parameters: {'borders': 1, 'times': 100}
 * Building the graph of function and its approximation
 * Nodes' number: 30.
11.11.2020 21:37:46 | The graph was built in 4.62 seconds.
11.11.2020 21:37:55 | Building the graph with following parameters:
 * function: <function build.<locals>.<lambda> at 0x000002772ADBD9D0>
 * Defined on (-10, 10)
 * Using `<function lagrange_polynomial at 0x0000027732BED700>` for approximation
 * Forming args as `(chebyshev_nodes(*xborders, nodes_n),)`
 * Build parameters: {'borders': 1, 'times': 100}
 * Building the graph of function and its approximation
 * Nodes' number: 30.
11.11.2020 21:38:03 | The graph was built in 8.33 seconds.
11.11.2020 21:39:05 | Building the graph with following parameters:
 * function: <function build.<locals>.<lambda> at 0x0000013CB0C5A700>
 * Defined on (-10, 10)
 * Using `<function lagrange_polynomial at 0x0000013CB0C4D700>` for approximation
 * Forming args as `(chebyshev_nodes(*xborders, nodes_n),)`
 * Build parameters: {'borders': 1, 'times': 100}
 * Building the graph of function and its approximation
 * Nodes' number: 30.
11.11.2020 21:39:08 | The graph was built in 3.74 seconds.
11.11.2020 21:39:34 | Building the graph with following parameters:
 * function: <function build.<locals>.<lambda> at 0x000001FFBD1DB700>
 * Defined on (-10, 10)
 * Using `<function lagrange_polynomial at 0x000001FFBD1CE700>` for approximation
 * Forming args as `(chebyshev_nodes(*xborders, nodes_n),)`
 * Build parameters: {'borders': 1, 'times': 100}
 * Building the graph of function and its approximation
 * Nodes' number: 30.
11.11.2020 21:39:35 | The graph was built in 0.60 seconds.
11.11.2020 21:39:46 | Building the graph with following parameters:
 * function: <function build.<locals>.<lambda> at 0x000001FFC032A310>
 * Defined on (-10, 10)
 * Using `<function lagrange_polynomial at 0x000001FFBD1CE700>` for approximation
 * Forming args as `(chebyshev_nodes(*xborders, nodes_n),)`
 * Build parameters: {'borders': 1, 'times': 100}
 * Building the graph of function and its approximation
 * Nodes' number: 30.
11.11.2020 21:39:46 | The graph was built in 0.62 seconds.
11.11.2020 21:39:53 | Building the graph with following parameters:
 * function: <function build.<locals>.<lambda> at 0x0000013CA8E1CA60>
 * Defined on (-10, 10)
 * Using `<function lagrange_polynomial at 0x0000013CB0C4D700>` for approximation
 * Forming args as `(chebyshev_nodes(*xborders, nodes_n),)`
 * Build parameters: {'borders': 1, 'times': 100}
 * Building the graph of function and its approximation
 * Nodes' number: 30.
11.11.2020 21:39:57 | The graph was built in 3.75 seconds.
11.11.2020 21:40:05 | Building the graph with following parameters:
 * function: <function build.<locals>.<lambda> at 0x0000013CA8E1CA60>
 * Defined on (-10, 10)
 * Using `<function lagrange_polynomial at 0x0000013CB0C4D700>` for approximation
 * Forming args as `(chebyshev_nodes(*xborders, nodes_n),)`
 * Build parameters: {'borders': 1, 'times': 100}
 * Building the graph of function and its approximation
 * Nodes' number: 30.
11.11.2020 21:40:11 | The graph was built in 6.02 seconds.
11.11.2020 21:40:19 | Building the graph with following parameters:
 * function: <function build.<locals>.<lambda> at 0x000001FFBD1DB790>
 * Defined on (-10, 10)
 * Using `<function lagrange_polynomial at 0x000001FFBD1CE700>` for approximation
 * Forming args as `(chebyshev_nodes(*xborders, nodes_n),)`
 * Build parameters: {'borders': 1, 'times': 100}
 * Building the graph of function and its approximation
 * Nodes' number: 30.
11.11.2020 21:40:20 | The graph was built in 0.80 seconds.
11.11.2020 21:40:52 | Building the graph with following parameters:
 * function: <function build.<locals>.<lambda> at 0x000001FFC2C72F70>
 * Defined on (-10, 10)
 * Using `<function lagrange_polynomial at 0x000001FFBD1CE700>` for approximation
 * Forming args as `(chebyshev_nodes(*xborders, nodes_n),)`
 * Build parameters: {'borders': 1, 'times': 100}
 * Building the graph of function and its approximation
 * Nodes' number: 30.
11.11.2020 21:40:54 | The graph was built in 1.48 seconds.
11.11.2020 21:41:10 | Building the graph with following parameters:
 * function: <function build.<locals>.<lambda> at 0x000001FFC04EA0D0>
 * Defined on (-10, 10)
 * Using `<function lagrange_polynomial at 0x000001FFBD1CE700>` for approximation
 * Forming args as `(chebyshev_nodes(*xborders, nodes_n),)`
 * Build parameters: {'borders': 1, 'times': 100}
 * Building the graph of function and its approximation
 * Nodes' number: 30.
11.11.2020 21:41:13 | The graph was built in 2.81 seconds.
11.11.2020 21:41:21 | Building the graph with following parameters:
 * function: <function build.<locals>.<lambda> at 0x000001FFB537BF70>
 * Defined on (-10, 10)
 * Using `<function lagrange_polynomial at 0x000001FFBD1CE700>` for approximation
 * Forming args as `(chebyshev_nodes(*xborders, nodes_n),)`
 * Build parameters: {'borders': 1, 'times': 100}
 * Building the graph of function and its approximation
 * Nodes' number: 30.
11.11.2020 21:41:25 | The graph was built in 3.43 seconds.
11.11.2020 21:41:41 | Building the graph with following parameters:
 * function: <function build.<locals>.<lambda> at 0x000001FFB537BF70>
 * Defined on (-10, 10)
 * Using `<function lagrange_polynomial at 0x000001FFBD1CE700>` for approximation
 * Forming args as `(chebyshev_nodes(*xborders, nodes_n),)`
 * Build parameters: {'times': 1000, 'borders': 1}
 * Building the graph of function and its approximation
 * Nodes' number: 30.
11.11.2020 21:42:12 | The graph was built in 30.78 seconds.
11.11.2020 21:42:43 | While building graph: error: invalid syntax (<string>, line 1)
11.11.2020 21:42:50 | Building the graph with following parameters:
 * function: <function build.<locals>.<lambda> at 0x000001FFB537BF70>
 * Defined on (-2, 2)
 * Using `<function lagrange_polynomial at 0x000001FFBD1CE700>` for approximation
 * Forming args as `(chebyshev_nodes(*xborders, nodes_n),)`
 * Build parameters: {'times': 1000, 'borders': 1}
 * Building the graph of function and its approximation
 * Nodes' number: 30.
11.11.2020 21:43:20 | The graph was built in 30.27 seconds.
11.11.2020 21:47:07 | Building the graph with following parameters:
 * function: <function build.<locals>.<lambda> at 0x000001FFC2E41F70>
 * Defined on (-2, 2)
 * Using `<function lagrange_polynomial at 0x000001FFBD1CE700>` for approximation
 * Forming args as `(chebyshev_nodes(*xborders, nodes_n),)`
 * Build parameters: {'times': 1000, 'borders': 1}
 * Building the graph of function and its approximation
 * Nodes' number: 50.
11.11.2020 21:47:35 | The graph was built in 27.97 seconds.
11.11.2020 21:49:50 | Building the graph with following parameters:
 * function: <function build.<locals>.<lambda> at 0x000001FFC2C9B700>
 * Defined on (-2, 2)
 * Using `<function lagrange_polynomial at 0x000001FFBD1CE700>` for approximation
 * Forming args as `(chebyshev_nodes(*xborders, nodes_n),)`
 * Build parameters: {'times': 1000, 'borders': 1}
 * Building the graph of function and its approximation
 * Nodes' number: 100.
11.11.2020 21:50:51 | The graph was built in 61.78 seconds.
11.11.2020 22:14:04 | Building the table with following parameters:
 * Function: abs(x)
 * Defined on (-10, 10)
 * Using `lagrange_polynomial` for approximation
 * Nodes' number: 30.
 * Alpha: 0.5.
11.11.2020 22:14:05 | The table was built in 1.51 seconds.
11.11.2020 22:15:20 | Building the graph with following parameters:
 * function: <function build.<locals>.<lambda> at 0x00000211E4E9F820>
 * Defined on (-10, 10)
 * Using `<function newton_polynomial_forward_equidistant at 0x00000211E4DFD5E0>` for approximation
 * Forming args as `(-10, 10, 30)`
 * Build parameters: {'borders': 1, 'times': 100}
 * Building the graph of function and its approximation
 * Nodes' number: 30.
11.11.2020 22:15:48 | Building the graph with following parameters:
 * function: <function build.<locals>.<lambda> at 0x000001FBA0CBB700>
 * Defined on (-10, 10)
 * Using `<function lagrange_polynomial at 0x000001FBA0CAE700>` for approximation
 * Forming args as `(chebyshev_nodes(*xborders, nodes_n),)`
 * Build parameters: {'borders': 1, 'times': 100}
 * Building the graph of function and its approximation
 * Nodes' number: 30.
11.11.2020 22:15:48 | The graph was built in 0.44 seconds.
11.11.2020 22:29:08 | Building the graph with following parameters:
 * function: <function build.<locals>.<lambda> at 0x000002A2C288A700>
 * Defined on (-10, 10)
 * Using `<function lagrange_polynomial at 0x000002A2C287E700>` for approximation
 * Forming args as `(chebyshev_nodes(*xborders, nodes_n),)`
 * Build parameters: {'borders': 1, 'times': 100}
 * Building the graph of function and its approximation
 * Nodes' number: 30.
11.11.2020 22:29:09 | The graph was built in 0.46 seconds.
11.11.2020 22:29:16 | Building the graph with following parameters:
 * function: <function build.<locals>.<lambda> at 0x000002A2C3845670>
 * Defined on (-10, 10)
 * Using `<function lagrange_polynomial at 0x000002A2C287E700>` for approximation
 * Forming args as `(chebyshev_nodes(*xborders, nodes_n),)`
 * Build parameters: {'borders': 1, 'times': 100}
 * Building the graph of function and its approximation
 * Nodes' number: 30.
11.11.2020 22:29:17 | The graph was built in 1.32 seconds.
12.11.2020 12:23:08 | Building the table with following parameters:
 * Function: abs(x)
 * Defined on (-10, 10)
 * Using `lagrange_polynomial` for approximation
 * Nodes' number: 30.
 * Alpha: None.
12.11.2020 12:23:09 | The table was built in 1.48 seconds.
12.11.2020 12:24:17 | Building the graph with following parameters:
 * function: <function build.<locals>.<lambda> at 0x00000237D3A0F820>
 * Defined on (-10, 10)
 * Using `<function lagrange_polynomial at 0x00000237D2A3F700>` for approximation
 * Forming args as `(chebyshev_nodes(*xborders, nodes_n),)`
 * Build parameters: {'borders': 1, 'times': 100}
 * Building the graph of function and its approximation
 * Nodes' number: 30.
12.11.2020 12:24:18 | The graph was built in 0.63 seconds.
12.11.2020 14:59:43 | Building the graph with following parameters:
 * function: <function build.<locals>.<lambda> at 0x000002411B3CB820>
 * Defined on (-10, 10)
 * Using `<function lagrange_polynomial at 0x000002411B3BD700>` for approximation
 * Forming args as `(chebyshev_nodes(*xborders, nodes_n),)`
 * Build parameters: {'borders': 1, 'times': 100}
 * Building the graph of function and its approximation
 * Nodes' number: 30.
12.11.2020 14:59:43 | The graph was built in 0.50 seconds.
12.11.2020 15:39:45 | Building the graph with following parameters:
 * function: <function build.<locals>.<lambda> at 0x000001BB6777B820>
 * Defined on (-10, 10)
 * Using `<function lagrange_polynomial at 0x000001BB6776D700>` for approximation
 * Forming args as `(chebyshev_nodes(*xborders, nodes_n),)`
 * Build parameters: {'borders': 1, 'times': 100}
 * Building the graph of function and its approximation
 * Nodes' number: 30.
12.11.2020 15:39:45 | The graph was built in 0.49 seconds.
12.11.2020 15:43:37 | Building the graph with following parameters:
 * function: <function build.<locals>.<lambda> at 0x000002033E08C820>
 * Defined on (-10, 10)
 * Using `<function lagrange_polynomial at 0x000002033E07F700>` for approximation
 * Forming args as `(chebyshev_nodes(*xborders, nodes_n),)`
 * Build parameters: {'borders': 1, 'times': 100}
 * Building the graph of function and its approximation
 * Nodes' number: 30.
12.11.2020 15:43:38 | The graph was built in 0.43 seconds.
12.11.2020 15:43:42 | Building the graph with following parameters:
 * function: <function build.<locals>.<lambda> at 0x000002033F025790>
 * Defined on (-10, 10)
 * Using `<function lagrange_polynomial at 0x000002033E07F700>` for approximation
 * Forming args as `(chebyshev_nodes(*xborders, nodes_n),)`
 * Build parameters: {'borders': 1, 'times': 100}
 * Building the graph of function and its approximation
 * Nodes' number: 30.
12.11.2020 15:43:42 | The graph was built in 0.58 seconds.
12.11.2020 15:43:46 | Building the graph with following parameters:
 * function: <function build.<locals>.<lambda> at 0x00000203411C95E0>
 * Defined on (-10, 10)
 * Using `<function lagrange_polynomial at 0x000002033E07F700>` for approximation
 * Forming args as `(chebyshev_nodes(*xborders, nodes_n),)`
 * Build parameters: {'borders': 1, 'times': 100}
 * Building the graph of function and its approximation
 * Nodes' number: 30.
12.11.2020 15:43:47 | The graph was built in 0.50 seconds.
12.11.2020 15:44:16 | Building the graph with following parameters:
 * function: <function build.<locals>.<lambda> at 0x0000014A50E4A820>
 * Defined on (-10, 10)
 * Using `<function lagrange_polynomial at 0x0000014A50E3E700>` for approximation
 * Forming args as `(chebyshev_nodes(*xborders, nodes_n),)`
 * Build parameters: {'borders': 1, 'times': 100}
 * Building the graph of function and its approximation
 * Nodes' number: 30.
12.11.2020 15:44:17 | The graph was built in 0.47 seconds.
12.11.2020 15:44:22 | Building the table with following parameters:
 * Function: abs(x)
 * Defined on (-10, 10)
 * Using `lagrange_polynomial` for approximation
 * Nodes' number: 30.
 * Alpha: None.
12.11.2020 15:44:31 | Building the table with following parameters:
 * Function: abs(x)
 * Defined on (-10, 10)
 * Using `lagrange_polynomial` for approximation
 * Nodes' number: 30.
 * Alpha: None.
12.11.2020 15:44:33 | The table was built in 1.66 seconds.
12.11.2020 15:44:36 | Building the table with following parameters:
 * Function: abs(x)
 * Defined on (-10, 10)
 * Using `lagrange_polynomial` for approximation
 * Nodes' number: 30.
 * Alpha: None.
12.11.2020 15:44:38 | The table was built in 1.44 seconds.
12.11.2020 15:44:40 | Building the table with following parameters:
 * Function: abs(x)
 * Defined on (-10, 10)
 * Using `lagrange_polynomial` for approximation
 * Nodes' number: 30.
 * Alpha: None.
12.11.2020 15:44:42 | The table was built in 1.43 seconds.
12.11.2020 15:57:04 | Building the graph with following parameters:
 * function: <function build.<locals>.<lambda> at 0x0000021B3680B8B0>
 * Defined on (-10, 10)
 * Using `<function lagrange_polynomial at 0x0000021B367FF700>` for approximation
 * Forming args as `(chebyshev_nodes(*xborders, nodes_n),)`
 * Build parameters: {'borders': 1, 'times': 100}
 * Building the graph of function and its approximation
 * Nodes' number: 30.
12.11.2020 15:57:04 | The graph was built in 0.49 seconds.
12.11.2020 15:57:46 | Building the table with following parameters:
 * Function: abs(x)
 * Defined on (-10, 10)
 * Using `lagrange_polynomial` for approximation
 * Nodes' number: 30.
 * Alpha: None.
12.11.2020 15:57:55 | Building the graph with following parameters:
 * function: <function build.<locals>.<lambda> at 0x0000018243E2B8B0>
 * Defined on (-10, 10)
 * Using `<function lagrange_polynomial at 0x0000018243E1E700>` for approximation
 * Forming args as `(chebyshev_nodes(*xborders, nodes_n),)`
 * Build parameters: {'borders': 1, 'times': 100}
 * Building the graph of function and its approximation
 * Nodes' number: 30.
12.11.2020 15:57:55 | The graph was built in 0.50 seconds.
12.11.2020 15:58:04 | Building the table with following parameters:
 * Function: abs(x)
 * Defined on (-10, 10)
 * Using `lagrange_polynomial` for approximation
 * Nodes' number: 30.
 * Alpha: None.
12.11.2020 15:58:06 | The table was built in 1.44 seconds.
12.11.2020 15:58:08 | Building the table with following parameters:
 * Function: abs(x)
 * Defined on (-10, 10)
 * Using `lagrange_polynomial` for approximation
 * Nodes' number: 30.
 * Alpha: None.
12.11.2020 15:58:10 | The table was built in 1.43 seconds.
12.11.2020 15:58:11 | Building the table with following parameters:
 * Function: abs(x)
 * Defined on (-10, 10)
 * Using `lagrange_polynomial` for approximation
 * Nodes' number: 30.
 * Alpha: None.
12.11.2020 15:58:13 | The table was built in 1.52 seconds.
12.11.2020 15:58:13 | Building the table with following parameters:
 * Function: abs(x)
 * Defined on (-10, 10)
 * Using `lagrange_polynomial` for approximation
 * Nodes' number: 30.
 * Alpha: None.
12.11.2020 15:58:15 | Building the table with following parameters:
 * Function: abs(x)
 * Defined on (-10, 10)
 * Using `lagrange_polynomial` for approximation
 * Nodes' number: 30.
 * Alpha: None.
12.11.2020 15:58:15 | The table was built in 0.41 seconds.
12.11.2020 15:58:16 | Building the table with following parameters:
 * Function: abs(x)
 * Defined on (-10, 10)
 * Using `lagrange_polynomial` for approximation
 * Nodes' number: 30.
 * Alpha: None.
12.11.2020 15:58:17 | Building the table with following parameters:
 * Function: abs(x)
 * Defined on (-10, 10)
 * Using `lagrange_polynomial` for approximation
 * Nodes' number: 30.
 * Alpha: None.
12.11.2020 15:58:17 | Building the table with following parameters:
 * Function: abs(x)
 * Defined on (-10, 10)
 * Using `lagrange_polynomial` for approximation
 * Nodes' number: 30.
 * Alpha: None.
12.11.2020 15:58:18 | The table was built in 0.29 seconds.
12.11.2020 15:58:31 | Building the table with following parameters:
 * Function: abs(x)
 * Defined on (-10, 10)
 * Using `lagrange_polynomial` for approximation
 * Nodes' number: 30.
 * Alpha: None.
12.11.2020 15:58:32 | The table was built in 1.52 seconds.
12.11.2020 15:58:40 | Building the table with following parameters:
 * Function: abs(x)
 * Defined on (-10, 10)
 * Using `lagrange_polynomial` for approximation
 * Nodes' number: 30.
 * Alpha: 0.0.
12.11.2020 15:58:42 | The table was built in 1.46 seconds.
12.11.2020 15:58:46 | Building the table with following parameters:
 * Function: abs(x)
 * Defined on (-10, 10)
 * Using `lagrange_polynomial` for approximation
 * Nodes' number: 30.
 * Alpha: 0.0.
12.11.2020 15:58:46 | Building the table with following parameters:
 * Function: abs(x)
 * Defined on (-10, 10)
 * Using `lagrange_polynomial` for approximation
 * Nodes' number: 30.
 * Alpha: 0.0.
12.11.2020 15:58:48 | The table was built in 1.01 seconds.
12.11.2020 15:59:03 | Building the table with following parameters:
 * Function: abs(x)
 * Defined on (-10, 10)
 * Using `lagrange_polynomial` for approximation
 * Nodes' number: 30.
 * Alpha: 0.0.
12.11.2020 15:59:04 | The table was built in 1.49 seconds.
12.11.2020 16:01:35 | The table was built in 168.74 seconds.
12.11.2020 16:01:40 | The table was built in 203.56 seconds.
12.11.2020 21:41:45 | Building the table with following parameters:
 * Function: abs(x)
 * Defined on (-10, 10)
 * Using `lagrange_polynomial` for approximation
 * Nodes' number: 30.
 * Alpha: 1.28e-08.
12.11.2020 21:41:47 | The table was built in 1.48 seconds.
12.11.2020 21:41:53 | Building the table with following parameters:
 * Function: abs(x)
 * Defined on (-10, 10)
 * Using `lagrange_polynomial` for approximation
 * Nodes' number: 30.
 * Alpha: 1.28e-08.
12.11.2020 21:41:54 | The table was built in 1.45 seconds.
15.11.2020 12:40:09 | Building the graph with following parameters:
 * function: <function build.<locals>.<lambda> at 0x000001D8F883E820>
 * Defined on (-10, 10)
 * Using `<function lagrange_polynomial at 0x000001D8F8841550>` for approximation
 * Forming args as `(chebyshev_nodes(*xborders, nodes_n),)`
 * Build parameters: {'borders': 1, 'times': 100}
 * Building the graph of function and its approximation
 * Nodes' number: 30.
15.11.2020 12:40:10 | The graph was built in 0.59 seconds.
15.11.2020 12:40:15 | Building the table with following parameters:
 * Function: abs(x)
 * Defined on (-10, 10)
 * Using `lagrange_polynomial` for approximation
 * Nodes' number: 30.
 * Alpha: None.
15.11.2020 12:40:17 | The table was built in 1.52 seconds.
15.11.2020 12:40:21 | Building the table with following parameters:
 * Function: abs(x)
 * Defined on (-10, 10)
 * Using `lagrange_polynomial` for approximation
 * Nodes' number: 30.
 * Alpha: None.
15.11.2020 12:40:23 | The table was built in 1.58 seconds.
15.11.2020 13:54:09 | Building the graph with following parameters:
 * function: <function build.<locals>.<lambda> at 0x0000019121560700>
 * Defined on (-10, 10)
 * Using `<function lagrange_polynomial at 0x0000019121562430>` for approximation
 * Forming args as `(chebyshev_nodes(*xborders, nodes_n),)`
 * Build parameters: {'borders': 1, 'times': 100}
 * Building the graph of function and its approximation
 * Nodes' number: 30.
15.11.2020 13:54:10 | While building graph: error: No module named 'messagebox'
15.11.2020 13:54:28 | Building the graph with following parameters:
 * function: <function build.<locals>.<lambda> at 0x0000021560CE8700>
 * Defined on (-10, 10)
 * Using `<function lagrange_polynomial at 0x0000021560CE2430>` for approximation
 * Forming args as `(chebyshev_nodes(*xborders, nodes_n),)`
 * Build parameters: {'borders': 1, 'times': 100}
 * Building the graph of function and its approximation
 * Nodes' number: 30.
15.11.2020 13:54:29 | While building graph: error: module 'tkinter.filedialog' has no attribute 'asksavetofilename'
15.11.2020 13:54:44 | Building the graph with following parameters:
 * function: <function build.<locals>.<lambda> at 0x0000020112F9F700>
 * Defined on (-10, 10)
 * Using `<function lagrange_polynomial at 0x0000020112FA2430>` for approximation
 * Forming args as `(chebyshev_nodes(*xborders, nodes_n),)`
 * Build parameters: {'borders': 1, 'times': 100}
 * Building the graph of function and its approximation
 * Nodes' number: 30.
15.11.2020 13:54:45 | While building graph: error: fname must be a PathLike or file handle
15.11.2020 13:55:03 | Building the graph with following parameters:
 * function: <function build.<locals>.<lambda> at 0x0000022BCCF08700>
 * Defined on (-10, 10)
 * Using `<function lagrange_polynomial at 0x0000022BCCF02430>` for approximation
 * Forming args as `(chebyshev_nodes(*xborders, nodes_n),)`
 * Build parameters: {'borders': 1, 'times': 100}
 * Building the graph of function and its approximation
 * Nodes' number: 30.
15.11.2020 13:55:14 | The graph was built in 11.22 seconds.
15.11.2020 19:26:52 | Building the graph with following parameters:
 * function: <function build.<locals>.<lambda> at 0x000001A60EBD8700>
 * Defined on (-10, 10)
 * Using `<function lagrange_polynomial at 0x000001A60EBD2430>` for approximation
 * Forming args as `(chebyshev_nodes(*xborders, nodes_n),)`
 * Build parameters: {'borders': 1, 'times': 100}
 * Building the graph of function and its approximation
 * Nodes' number: 30.
15.11.2020 19:26:52 | The graph was built in 0.49 seconds.
15.11.2020 19:32:21 | Building the graph with following parameters:
 * function: <function build.<locals>.<lambda> at 0x000001DE2B2E1700>
 * Defined on (-10, 10)
 * Using `<function lagrange_polynomial at 0x000001DE2B2E3430>` for approximation
 * Forming args as `(chebyshev_nodes(*xborders, nodes_n),)`
 * Build parameters: {'borders': 1, 'times': 100}
 * Building the graph of function and its approximation
 * Nodes' number: 30.
15.11.2020 19:32:22 | The graph was built in 0.57 seconds.
15.11.2020 19:34:46 | Building the graph with following parameters:
 * function: <function build.<locals>.<lambda> at 0x000001E114958700>
 * Defined on (-10, 10)
 * Using `<function lagrange_polynomial at 0x000001E114952430>` for approximation
 * Forming args as `(chebyshev_nodes(*xborders, nodes_n),)`
 * Build parameters: {'borders': 1, 'times': 100}
 * Building the graph of function and its approximation
 * Nodes' number: 30.
15.11.2020 19:34:47 | The graph was built in 0.60 seconds.
15.11.2020 19:34:48 | While building graph: error: [WinError 3] Системе не удается найти указанный путь: ''
15.11.2020 19:40:02 | Building the graph with following parameters:
 * function: <function build.<locals>.<lambda> at 0x00000207755C1700>
 * Defined on (-10, 10)
 * Using `<function lagrange_polynomial at 0x00000207755C3430>` for approximation
 * Forming args as `(chebyshev_nodes(*xborders, nodes_n),)`
 * Build parameters: {'borders': 1, 'times': 100}
 * Building the graph of function and its approximation
 * Nodes' number: 30.
15.11.2020 19:40:03 | The graph was built in 0.60 seconds.
15.11.2020 19:40:31 | Building the graph with following parameters:
 * function: <function build.<locals>.<lambda> at 0x0000020775B72670>
 * Defined on (-10, 10)
 * Using `<function lagrange_polynomial at 0x00000207755C3430>` for approximation
 * Forming args as `(chebyshev_nodes(*xborders, nodes_n),)`
 * Build parameters: {'borders': 1, 'times': 100}
 * Building the graph of function and its approximation
 * Nodes' number: 30.
15.11.2020 19:40:32 | The graph was built in 0.63 seconds.
15.11.2020 19:40:53 | Building the graph with following parameters:
 * function: <function build.<locals>.<lambda> at 0x0000025D60B29700>
 * Defined on (-10, 10)
 * Using `<function lagrange_polynomial at 0x0000025D60B23430>` for approximation
 * Forming args as `(chebyshev_nodes(*xborders, nodes_n),)`
 * Build parameters: {'borders': 1, 'times': 100}
 * Building the graph of function and its approximation
 * Nodes' number: 30.
15.11.2020 19:40:54 | The graph was built in 0.54 seconds.
15.11.2020 19:42:14 | Building the graph with following parameters:
 * function: <function build.<locals>.<lambda> at 0x0000018581AB9700>
 * Defined on (-10, 10)
 * Using `<function lagrange_polynomial at 0x0000018581AB3430>` for approximation
 * Forming args as `(chebyshev_nodes(*xborders, nodes_n),)`
 * Build parameters: {'borders': 1, 'times': 100}
 * Building the graph of function and its approximation
 * Nodes' number: 30.
15.11.2020 19:42:14 | The graph was built in 0.59 seconds.
15.11.2020 19:44:23 | Building the graph with following parameters:
 * function: <function build.<locals>.<lambda> at 0x000001F747279700>
 * Defined on (-10, 10)
 * Using `<function lagrange_polynomial at 0x000001F747273430>` for approximation
 * Forming args as `(chebyshev_nodes(*xborders, nodes_n),)`
 * Build parameters: {'borders': 1, 'times': 100}
 * Building the graph of function and its approximation
 * Nodes' number: 30.
15.11.2020 19:44:24 | The graph was built in 0.59 seconds.
15.11.2020 19:45:11 | Building the graph with following parameters:
 * function: <function build.<locals>.<lambda> at 0x0000029811849700>
 * Defined on (-10, 10)
 * Using `<function lagrange_polynomial at 0x0000029811843430>` for approximation
 * Forming args as `(chebyshev_nodes(*xborders, nodes_n),)`
 * Build parameters: {'borders': 1, 'times': 100}
 * Building the graph of function and its approximation
 * Nodes' number: 30.
15.11.2020 19:45:12 | The graph was built in 0.58 seconds.
15.11.2020 19:46:28 | Building the graph with following parameters:
 * function: <function build.<locals>.<lambda> at 0x0000018A7FE61700>
 * Defined on (-10, 10)
 * Using `<function lagrange_polynomial at 0x0000018A7FE63430>` for approximation
 * Forming args as `(chebyshev_nodes(*xborders, nodes_n),)`
 * Build parameters: {'borders': 1, 'times': 100}
 * Building the graph of function and its approximation
 * Nodes' number: 30.
15.11.2020 19:46:28 | The graph was built in 0.60 seconds.
15.11.2020 19:46:46 | While building graph: error: name 'os' is not defined
15.11.2020 19:47:18 | Building the graph with following parameters:
 * function: <function build.<locals>.<lambda> at 0x0000024DAFCA8700>
 * Defined on (-10, 10)
 * Using `<function lagrange_polynomial at 0x0000024DAFCA3430>` for approximation
 * Forming args as `(chebyshev_nodes(*xborders, nodes_n),)`
 * Build parameters: {'borders': 1, 'times': 100}
 * Building the graph of function and its approximation
 * Nodes' number: 30.
15.11.2020 19:47:19 | The graph was built in 0.57 seconds.
15.11.2020 19:47:21 | While building graph: error: 'str' object is not callable
15.11.2020 20:04:53 | Building the graph with following parameters:
 * function: <function build.<locals>.<lambda> at 0x00000231CFF58700>
 * Defined on (-10, 10)
 * Using `<function lagrange_polynomial at 0x00000231CFF52430>` for approximation
 * Forming args as `(chebyshev_nodes(*xborders, nodes_n),)`
 * Build parameters: {'borders': 1, 'times': 100}
 * Building the graph of function and its approximation
 * Nodes' number: 30.
15.11.2020 20:04:53 | The graph was built in 0.53 seconds.
15.11.2020 20:06:59 | Building the graph with following parameters:
 * function: <function build.<locals>.<lambda> at 0x0000021DBCF30700>
 * Defined on (-10, 10)
 * Using `<function lagrange_polynomial at 0x0000021DBCF33430>` for approximation
 * Forming args as `(chebyshev_nodes(*xborders, nodes_n),)`
 * Build parameters: {'borders': 1, 'times': 100}
 * Building the graph of function and its approximation
 * Nodes' number: 30.
15.11.2020 20:06:59 | The graph was built in 0.58 seconds.
15.11.2020 20:07:29 | Building the graph with following parameters:
 * function: <function build.<locals>.<lambda> at 0x0000017A4B239700>
 * Defined on (-10, 10)
 * Using `<function lagrange_polynomial at 0x0000017A4B233430>` for approximation
 * Forming args as `(chebyshev_nodes(*xborders, nodes_n),)`
 * Build parameters: {'borders': 1, 'times': 100}
 * Building the graph of function and its approximation
 * Nodes' number: 30.
15.11.2020 20:07:29 | The graph was built in 0.59 seconds.
15.11.2020 20:08:06 | Building the graph with following parameters:
 * function: <function build.<locals>.<lambda> at 0x000002419C069700>
 * Defined on (-10, 10)
 * Using `<function lagrange_polynomial at 0x000002419C063430>` for approximation
 * Forming args as `(chebyshev_nodes(*xborders, nodes_n),)`
 * Build parameters: {'borders': 1, 'times': 100}
 * Building the graph of function and its approximation
 * Nodes' number: 30.
15.11.2020 20:08:07 | The graph was built in 0.60 seconds.
15.11.2020 20:10:15 | Building the graph with following parameters:
 * function: <function build.<locals>.<lambda> at 0x000001E6624E9700>
 * Defined on (-10, 10)
 * Using `<function lagrange_polynomial at 0x000001E6624E3430>` for approximation
 * Forming args as `(chebyshev_nodes(*xborders, nodes_n),)`
 * Build parameters: {'borders': 1, 'times': 100}
 * Building the graph of function and its approximation
 * Nodes' number: 30.
15.11.2020 20:10:15 | The graph was built in 0.58 seconds.
15.11.2020 20:10:52 | Building the graph with following parameters:
 * function: <function build.<locals>.<lambda> at 0x00000235B02E9700>
 * Defined on (-10, 10)
 * Using `<function lagrange_polynomial at 0x00000235B02E3430>` for approximation
 * Forming args as `(chebyshev_nodes(*xborders, nodes_n),)`
 * Build parameters: {'borders': 1, 'times': 100}
 * Building the graph of function and its approximation
 * Nodes' number: 30.
15.11.2020 20:10:53 | The graph was built in 0.61 seconds.
15.11.2020 20:11:30 | Building the graph with following parameters:
 * function: <function build.<locals>.<lambda> at 0x000001DF8BC31700>
 * Defined on (-10, 10)
 * Using `<function lagrange_polynomial at 0x000001DF8BC33430>` for approximation
 * Forming args as `(chebyshev_nodes(*xborders, nodes_n),)`
 * Build parameters: {'borders': 1, 'times': 100}
 * Building the graph of function and its approximation
 * Nodes' number: 30.
15.11.2020 20:11:31 | The graph was built in 0.60 seconds.
15.11.2020 20:11:50 | Building the graph with following parameters:
 * function: <function build.<locals>.<lambda> at 0x0000026979EE9700>
 * Defined on (-10, 10)
 * Using `<function lagrange_polynomial at 0x0000026979EE3430>` for approximation
 * Forming args as `(chebyshev_nodes(*xborders, nodes_n),)`
 * Build parameters: {'borders': 1, 'times': 100}
 * Building the graph of function and its approximation
 * Nodes' number: 30.
15.11.2020 20:11:50 | The graph was built in 0.48 seconds.
15.11.2020 20:13:00 | Building the graph with following parameters:
 * function: <function build.<locals>.<lambda> at 0x00000268C1479700>
 * Defined on (-10, 10)
 * Using `<function lagrange_polynomial at 0x00000268C1473430>` for approximation
 * Forming args as `(chebyshev_nodes(*xborders, nodes_n),)`
 * Build parameters: {'borders': 1, 'times': 100}
 * Building the graph of function and its approximation
 * Nodes' number: 30.
15.11.2020 20:13:01 | The graph was built in 0.59 seconds.
15.11.2020 20:14:38 | Building the graph with following parameters:
 * function: <function build.<locals>.<lambda> at 0x000001FFD9FA2700>
 * Defined on (-10, 10)
 * Using `<function lagrange_polynomial at 0x000001FFD9FA4430>` for approximation
 * Forming args as `(chebyshev_nodes(*xborders, nodes_n),)`
 * Build parameters: {'borders': 1, 'times': 100}
 * Building the graph of function and its approximation
 * Nodes' number: 30.
15.11.2020 20:14:39 | The graph was built in 0.60 seconds.
15.11.2020 20:15:03 | Building the graph with following parameters:
 * function: <function build.<locals>.<lambda> at 0x000001FC15A70700>
 * Defined on (-10, 10)
 * Using `<function lagrange_polynomial at 0x000001FC15A73430>` for approximation
 * Forming args as `(chebyshev_nodes(*xborders, nodes_n),)`
 * Build parameters: {'borders': 1, 'times': 100}
 * Building the graph of function and its approximation
 * Nodes' number: 30.
15.11.2020 20:15:03 | The graph was built in 0.56 seconds.
15.11.2020 20:16:42 | Building the graph with following parameters:
 * function: <function build.<locals>.<lambda> at 0x0000014E4DF90700>
 * Defined on (-10, 10)
 * Using `<function lagrange_polynomial at 0x0000014E4DF92430>` for approximation
 * Forming args as `(chebyshev_nodes(*xborders, nodes_n),)`
 * Build parameters: {'borders': 1, 'times': 100}
 * Building the graph of function and its approximation
 * Nodes' number: 30.
15.11.2020 20:16:43 | The graph was built in 0.54 seconds.
15.11.2020 20:16:59 | Building the graph with following parameters:
 * function: <function build.<locals>.<lambda> at 0x0000014C7E31A700>
 * Defined on (-10, 10)
 * Using `<function lagrange_polynomial at 0x0000014C7E314430>` for approximation
 * Forming args as `(chebyshev_nodes(*xborders, nodes_n),)`
 * Build parameters: {'borders': 1, 'times': 100}
 * Building the graph of function and its approximation
 * Nodes' number: 30.
15.11.2020 20:16:59 | The graph was built in 0.57 seconds.
15.11.2020 20:17:16 | Building the graph with following parameters:
 * function: <function build.<locals>.<lambda> at 0x0000021E05109700>
 * Defined on (-10, 10)
 * Using `<function lagrange_polynomial at 0x0000021E05103430>` for approximation
 * Forming args as `(chebyshev_nodes(*xborders, nodes_n),)`
 * Build parameters: {'borders': 1, 'times': 100}
 * Building the graph of function and its approximation
 * Nodes' number: 30.
15.11.2020 20:17:16 | The graph was built in 0.58 seconds.
15.11.2020 20:18:30 | Building the table with following parameters:
 * Function: abs(x)
 * Defined on (-10, 10)
 * Using `lagrange_polynomial` for approximation
 * Nodes' number: 30.
 * Alpha: None.
15.11.2020 20:18:32 | The table was built in 1.57 seconds.
15.11.2020 20:18:35 | Building the graph with following parameters:
 * function: <function build.<locals>.<lambda> at 0x000002D07F741CA0>
 * Defined on (-10, 10)
 * Using `<function lagrange_polynomial at 0x000002D07F743430>` for approximation
 * Forming args as `(chebyshev_nodes(*xborders, nodes_n),)`
 * Build parameters: {'borders': 1, 'times': 100}
 * Building the graph of function and its approximation
 * Nodes' number: 30.
15.11.2020 20:18:36 | The graph was built in 0.61 seconds.
15.11.2020 20:19:33 | Building the graph with following parameters:
 * function: <function build.<locals>.<lambda> at 0x000001E2BE291700>
 * Defined on (-10, 10)
 * Using `<function lagrange_polynomial at 0x000001E2BE293430>` for approximation
 * Forming args as `(chebyshev_nodes(*xborders, nodes_n),)`
 * Build parameters: {'borders': 1, 'times': 100}
 * Building the graph of function and its approximation
 * Nodes' number: 30.
15.11.2020 20:19:33 | The graph was built in 0.57 seconds.
15.11.2020 20:34:19 | Building the graph with following parameters:
 * function: <function build.<locals>.<lambda> at 0x000001C2DB5B9700>
 * Defined on (-10, 10)
 * Using `<function lagrange_polynomial at 0x000001C2DB5B3430>` for approximation
 * Forming args as `(chebyshev_nodes(*xborders, nodes_n),)`
 * Build parameters: {'borders': 1, 'times': 100}
 * Building the graph of function and its approximation
 * Nodes' number: 30.
15.11.2020 20:34:20 | The graph was built in 0.56 seconds.
15.11.2020 20:35:09 | Building the graph with following parameters:
 * function: <function build.<locals>.<lambda> at 0x0000020BF54B1700>
 * Defined on (-10, 10)
 * Using `<function lagrange_polynomial at 0x0000020BF54B3430>` for approximation
 * Forming args as `(chebyshev_nodes(*xborders, nodes_n),)`
 * Build parameters: {'borders': 1, 'times': 100}
 * Building the graph of function and its approximation
 * Nodes' number: 30.
15.11.2020 20:35:09 | The graph was built in 0.58 seconds.
15.11.2020 20:43:08 | Building the graph with following parameters:
 * function: <function build.<locals>.<lambda> at 0x000001CF06038700>
 * Defined on (-10, 10)
 * Using `<function lagrange_polynomial at 0x000001CF06033430>` for approximation
 * Forming args as `(chebyshev_nodes(*xborders, nodes_n),)`
 * Build parameters: {'borders': 1, 'times': 100}
 * Building the graph of function and its approximation
 * Nodes' number: 30.
15.11.2020 20:43:09 | The graph was built in 0.55 seconds.
15.11.2020 20:47:38 | Building the graph with following parameters:
 * function: <function build.<locals>.<lambda> at 0x000001FA27689700>
 * Defined on (-10, 10)
 * Using `<function lagrange_polynomial at 0x000001FA27683430>` for approximation
 * Forming args as `(chebyshev_nodes(*xborders, nodes_n),)`
 * Build parameters: {'borders': 1, 'times': 100}
 * Building the graph of function and its approximation
 * Nodes' number: 30.
15.11.2020 20:47:38 | The graph was built in 0.59 seconds.
15.11.2020 20:54:49 | Building the graph with following parameters:
 * function: <function build.<locals>.<lambda> at 0x0000018857850700>
 * Defined on (-10, 10)
 * Using `<function lagrange_polynomial at 0x0000018857853430>` for approximation
 * Forming args as `(chebyshev_nodes(*xborders, nodes_n),)`
 * Build parameters: {'borders': 1, 'times': 100}
 * Building the graph of function and its approximation
 * Nodes' number: 30.
15.11.2020 20:54:49 | The graph was built in 0.53 seconds.
15.11.2020 20:55:22 | Building the graph with following parameters:
 * function: <function build.<locals>.<lambda> at 0x000001C652DE9700>
 * Defined on (-10, 10)
 * Using `<function lagrange_polynomial at 0x000001C652DE3430>` for approximation
 * Forming args as `(chebyshev_nodes(*xborders, nodes_n),)`
 * Build parameters: {'borders': 1, 'times': 100}
 * Building the graph of function and its approximation
 * Nodes' number: 30.
15.11.2020 20:55:22 | The graph was built in 0.59 seconds.
15.11.2020 20:55:24 | While building graph: error: [WinError 161] Указан недопустимый путь: '//'
15.11.2020 20:56:40 | Building the graph with following parameters:
 * function: <function build.<locals>.<lambda> at 0x000001B2D4230700>
 * Defined on (-10, 10)
 * Using `<function lagrange_polynomial at 0x000001B2D4232430>` for approximation
 * Forming args as `(chebyshev_nodes(*xborders, nodes_n),)`
 * Build parameters: {'borders': 1, 'times': 100}
 * Building the graph of function and its approximation
 * Nodes' number: 30.
15.11.2020 20:56:41 | The graph was built in 0.57 seconds.
15.11.2020 20:56:43 | While building graph: error: [Errno 13] Permission denied: '/build_0.png'
15.11.2020 20:57:05 | Building the graph with following parameters:
 * function: <function build.<locals>.<lambda> at 0x0000021E2ECC9700>
 * Defined on (-10, 10)
 * Using `<function lagrange_polynomial at 0x0000021E2ECC3430>` for approximation
 * Forming args as `(chebyshev_nodes(*xborders, nodes_n),)`
 * Build parameters: {'borders': 1, 'times': 100}
 * Building the graph of function and its approximation
 * Nodes' number: 30.
15.11.2020 20:57:05 | The graph was built in 0.57 seconds.
15.11.2020 20:59:21 | Building the graph with following parameters:
 * function: <function build.<locals>.<lambda> at 0x000001D4D1619700>
 * Defined on (-10, 10)
 * Using `<function lagrange_polynomial at 0x000001D4D1613430>` for approximation
 * Forming args as `(chebyshev_nodes(*xborders, nodes_n),)`
 * Build parameters: {'borders': 1, 'times': 100}
 * Building the graph of function and its approximation
 * Nodes' number: 30.
15.11.2020 20:59:22 | The graph was built in 0.58 seconds.
15.11.2020 21:01:42 | Building the graph with following parameters:
 * function: <function build.<locals>.<lambda> at 0x0000017AA88A8700>
 * Defined on (-10, 10)
 * Using `<function lagrange_polynomial at 0x0000017AA88A3430>` for approximation
 * Forming args as `(chebyshev_nodes(*xborders, nodes_n),)`
 * Build parameters: {'borders': 1, 'times': 100}
 * Building the graph of function and its approximation
 * Nodes' number: 30.
15.11.2020 21:01:43 | The graph was built in 0.60 seconds.
15.11.2020 21:02:28 | Building the graph with following parameters:
 * function: <function build.<locals>.<lambda> at 0x000002C1079C9700>
 * Defined on (-10, 10)
 * Using `<function lagrange_polynomial at 0x000002C1079C4430>` for approximation
 * Forming args as `(chebyshev_nodes(*xborders, nodes_n),)`
 * Build parameters: {'borders': 1, 'times': 100}
 * Building the graph of function and its approximation
 * Nodes' number: 30.
15.11.2020 21:02:28 | The graph was built in 0.51 seconds.
15.11.2020 21:06:33 | Building the graph with following parameters:
 * function: <function build.<locals>.<lambda> at 0x00000286B0941700>
 * Defined on (-10, 10)
 * Using `<function lagrange_polynomial at 0x00000286B0943430>` for approximation
 * Forming args as `(chebyshev_nodes(*xborders, nodes_n),)`
 * Build parameters: {'borders': 1, 'times': 100}
 * Building the graph of function and its approximation
 * Nodes' number: 30.
15.11.2020 21:06:34 | The graph was built in 0.57 seconds.
15.11.2020 21:07:31 | Building the graph with following parameters:
 * function: <function build.<locals>.<lambda> at 0x000001ADCECE1700>
 * Defined on (-10, 10)
 * Using `<function lagrange_polynomial at 0x000001ADCECE3430>` for approximation
 * Forming args as `(chebyshev_nodes(*xborders, nodes_n),)`
 * Build parameters: {'borders': 1, 'times': 100}
 * Building the graph of function and its approximation
 * Nodes' number: 30.
15.11.2020 21:07:31 | The graph was built in 0.55 seconds.
15.11.2020 21:09:17 | Building the graph with following parameters:
 * function: <function build.<locals>.<lambda> at 0x0000016C395C0700>
 * Defined on (-10, 10)
 * Using `<function lagrange_polynomial at 0x0000016C395C3430>` for approximation
 * Forming args as `(chebyshev_nodes(*xborders, nodes_n),)`
 * Build parameters: {'borders': 1, 'times': 100}
 * Building the graph of function and its approximation
 * Nodes' number: 30.
15.11.2020 21:09:18 | The graph was built in 0.60 seconds.
15.11.2020 21:19:42 | Building the graph with following parameters:
 * function: <function build.<locals>.<lambda> at 0x00000192D4999820>
 * Defined on (-10, 10)
 * Using `<function lagrange_polynomial at 0x00000192D4993430>` for approximation
 * Forming args as `(chebyshev_nodes(*xborders, nodes_n),)`
 * Build parameters: {'borders': 1, 'times': 100}
 * Building the graph of function and its approximation
 * Nodes' number: 30.
15.11.2020 21:19:43 | The graph was built in 0.52 seconds.
15.11.2020 21:19:44 | While building graph: error: name 'save_graph_var' is not defined
15.11.2020 21:34:01 | Building the graph with following parameters:
 * function: <function build.<locals>.<lambda> at 0x0000026AFFFAA8B0>
 * Defined on (-10, 10)
 * Using `<function lagrange_polynomial at 0x0000026AFFFA44C0>` for approximation
 * Forming args as `(chebyshev_nodes(*xborders, nodes_n),)`
 * Build parameters: {'borders': 1, 'times': 100}
 * Building the graph of function and its approximation
 * Nodes' number: 30.
15.11.2020 21:34:01 | The graph was built in 0.53 seconds.
15.11.2020 21:34:03 | While building graph: error: name 'sasksaveasfilename' is not defined
16.11.2020 12:01:35 | Building the graph with following parameters:
 * function: <function build.<locals>.<lambda> at 0x0000020C430B9940>
 * Defined on (-10, 10)
 * Using `<function lagrange_polynomial at 0x0000020C430B34C0>` for approximation
 * Forming args as `(chebyshev_nodes(*xborders, nodes_n),)`
 * Build parameters: {'borders': 1, 'times': 100}
 * Building the graph of function and its approximation
 * Nodes' number: 30.
16.11.2020 12:01:35 | The graph was built in 0.67 seconds.
16.11.2020 12:01:54 | Building the graph with following parameters:
 * function: <function build.<locals>.<lambda> at 0x0000020C430B9940>
 * Defined on (-10, 10)
 * Using `<function lagrange_polynomial at 0x0000020C430B34C0>` for approximation
 * Forming args as `(chebyshev_nodes(*xborders, nodes_n),)`
 * Build parameters: {'borders': 1, 'times': 100}
 * Building the graph of function and its approximation
 * Nodes' number: 30.
16.11.2020 12:01:55 | The graph was built in 0.56 seconds.
16.11.2020 12:03:01 | Building the graph with following parameters:
 * function: <function build.<locals>.<lambda> at 0x00000251ED10A940>
 * Defined on (-10, 10)
 * Using `<function lagrange_polynomial at 0x00000251ED1044C0>` for approximation
 * Forming args as `(chebyshev_nodes(*xborders, nodes_n),)`
 * Build parameters: {'borders': 1, 'times': 100}
 * Building the graph of function and its approximation
 * Nodes' number: 30.
16.11.2020 12:03:01 | The graph was built in 0.58 seconds.
16.11.2020 15:56:33 | Building the graph with following parameters:
 * function: <function build.<locals>.<lambda> at 0x0000024DDC06A940>
 * Defined on (-10, 10)
 * Using `<function lagrange_polynomial at 0x0000024DDC0644C0>` for approximation
 * Forming args as `(chebyshev_nodes(*xborders, nodes_n),)`
 * Build parameters: {'borders': 1, 'times': 100}
 * Building the graph of function and its approximation
 * Nodes' number: 30.
16.11.2020 15:56:34 | The graph was built in 0.58 seconds.
16.11.2020 15:56:35 | While building graph: error: Undefined type of var.
16.11.2020 16:05:49 | Building the graph with following parameters:
 * function: <function build.<locals>.<lambda> at 0x000001D97A989940>
 * Defined on (-10, 10)
 * Using `<function lagrange_polynomial at 0x000001D97A9834C0>` for approximation
 * Forming args as `(chebyshev_nodes(*xborders, nodes_n),)`
 * Build parameters: {'borders': 1, 'times': 100}
 * Building the graph of function and its approximation
 * Nodes' number: 30.
16.11.2020 16:05:50 | The graph was built in 0.55 seconds.
16.11.2020 16:06:06 | Building the graph with following parameters:
 * function: <function build.<locals>.<lambda> at 0x000001D97A989940>
 * Defined on (-10, 10)
 * Using `<function lagrange_polynomial at 0x000001D97A9834C0>` for approximation
 * Forming args as `(chebyshev_nodes(*xborders, nodes_n),)`
 * Build parameters: {'borders': 1, 'times': 100}
 * Building the graph of function and its approximation
 * Nodes' number: 30.
16.11.2020 16:06:06 | The graph was built in 0.61 seconds.
16.11.2020 16:13:17 | Building the graph with following parameters:
 * function: <function build.<locals>.<lambda> at 0x0000029C2F07F940>
 * Defined on (-10, 10)
 * Using `<function lagrange_polynomial at 0x0000029C2F0834C0>` for approximation
 * Forming args as `(chebyshev_nodes(*xborders, nodes_n),)`
 * Build parameters: {'borders': 1, 'times': 100}
 * Building the graph of function and its approximation
 * Nodes' number: 30.
16.11.2020 16:13:18 | The graph was built in 0.57 seconds.
16.11.2020 16:13:41 | Building the graph with following parameters:
 * function: <function build.<locals>.<lambda> at 0x000001D0564E1940>
 * Defined on (-10, 10)
 * Using `<function lagrange_polynomial at 0x000001D0564E34C0>` for approximation
 * Forming args as `(chebyshev_nodes(*xborders, nodes_n),)`
 * Build parameters: {'borders': 1, 'times': 100}
 * Building the graph of function and its approximation
 * Nodes' number: 30.
16.11.2020 16:13:42 | The graph was built in 0.61 seconds.
16.11.2020 16:21:29 | Building the graph with following parameters:
 * function: <function build.<locals>.<lambda> at 0x0000022403C39940>
 * Defined on (-10, 10)
 * Using `<function lagrange_polynomial at 0x0000022403C334C0>` for approximation
 * Forming args as `(chebyshev_nodes(*xborders, nodes_n),)`
 * Build parameters: {'borders': 1, 'times': 100}
 * Building the graph of function and its approximation
 * Nodes' number: 30.
16.11.2020 16:21:30 | The graph was built in 0.59 seconds.
16.11.2020 16:21:32 | While building graph: error: name 'nigh_index' is not defined
16.11.2020 16:22:27 | Building the graph with following parameters:
 * function: <function build.<locals>.<lambda> at 0x000002CECF9FA940>
 * Defined on (-10, 10)
 * Using `<function lagrange_polynomial at 0x000002CECF9F44C0>` for approximation
 * Forming args as `(chebyshev_nodes(*xborders, nodes_n),)`
 * Build parameters: {'borders': 1, 'times': 100}
 * Building the graph of function and its approximation
 * Nodes' number: 30.
16.11.2020 16:22:28 | The graph was built in 0.53 seconds.
16.11.2020 16:22:44 | Building the graph with following parameters:
 * function: <function build.<locals>.<lambda> at 0x000001B76AB40940>
 * Defined on (-10, 10)
 * Using `<function lagrange_polynomial at 0x000001B76AB444C0>` for approximation
 * Forming args as `(chebyshev_nodes(*xborders, nodes_n),)`
 * Build parameters: {'borders': 1, 'times': 100}
 * Building the graph of function and its approximation
 * Nodes' number: 30.
16.11.2020 16:22:45 | The graph was built in 0.58 seconds.
16.11.2020 16:47:13 | Building the graph with following parameters:
 * function: <function build.<locals>.<lambda> at 0x000001D21013A940>
 * Defined on (-10, 10)
 * Using `<function lagrange_polynomial at 0x000001D2101344C0>` for approximation
 * Forming args as `(chebyshev_nodes(*xborders, nodes_n),)`
 * Build parameters: {'borders': 1, 'times': 100}
 * Building the graph of function and its approximation
 * Nodes' number: 30.
16.11.2020 16:47:14 | The graph was built in 0.61 seconds.
16.11.2020 16:53:02 | Building the graph with following parameters:
 * function: <function build.<locals>.<lambda> at 0x00000226CE221940>
 * Defined on (-10, 10)
 * Using `<function lagrange_polynomial at 0x00000226CE2234C0>` for approximation
 * Forming args as `(chebyshev_nodes(*xborders, nodes_n),)`
 * Build parameters: {'borders': 1, 'times': 100}
 * Building the graph of function and its approximation
 * Nodes' number: 30.
16.11.2020 16:53:03 | The graph was built in 0.55 seconds.
16.11.2020 18:44:13 | Building the graph with following parameters:
 * function: <function build.<locals>.<lambda> at 0x000002578145A940>
 * Defined on (-10, 10)
 * Using `<function lagrange_polynomial at 0x00000257814544C0>` for approximation
 * Forming args as `(chebyshev_nodes(*xborders, nodes_n),)`
 * Build parameters: {'borders': 1, 'times': 100}
 * Building the graph of function and its approximation
 * Nodes' number: 30.
16.11.2020 18:44:14 | The graph was built in 0.55 seconds.
16.11.2020 18:44:30 | Building the graph with following parameters:
 * function: <function build.<locals>.<lambda> at 0x000002578145A940>
 * Defined on (-10, 10)
 * Using `<function lagrange_polynomial at 0x00000257814544C0>` for approximation
 * Forming args as `(chebyshev_nodes(*xborders, nodes_n),)`
 * Build parameters: {'borders': 1, 'times': 100}
 * Building the graph of function and its approximation
 * Nodes' number: 30.
16.11.2020 18:44:31 | The graph was built in 0.59 seconds.
16.11.2020 18:44:32 | While building graph: error: local variable '_name' referenced before assignment
16.11.2020 18:53:02 | Building the graph with following parameters:
 * function: <function build.<locals>.<lambda> at 0x000001F16E57A940>
 * Defined on (-10, 10)
 * Using `<function lagrange_polynomial at 0x000001F16E5744C0>` for approximation
 * Forming args as `(chebyshev_nodes(*xborders, nodes_n),)`
 * Build parameters: {'borders': 1, 'times': 100}
 * Building the graph of function and its approximation
 * Nodes' number: 30.
16.11.2020 18:53:03 | The graph was built in 0.55 seconds.
16.11.2020 18:54:05 | Building the graph with following parameters:
 * function: <function build.<locals>.<lambda> at 0x000001F1716CD550>
 * Defined on (-10, 10)
 * Using `<function lagrange_polynomial at 0x000001F16E5744C0>` for approximation
 * Forming args as `(chebyshev_nodes(*xborders, nodes_n),)`
 * Build parameters: {'borders': 1, 'times': 100}
 * Building the graph of function and its approximation
 * Nodes' number: 30.
16.11.2020 18:54:06 | The graph was built in 0.60 seconds.
16.11.2020 18:54:49 | Building the graph with following parameters:
 * function: <function build.<locals>.<lambda> at 0x000001F16E57A9D0>
 * Defined on (-10, 10)
 * Using `<function lagrange_polynomial at 0x000001F16E5744C0>` for approximation
 * Forming args as `(chebyshev_nodes(*xborders, nodes_n),)`
 * Build parameters: {'borders': 1, 'times': 100}
 * Building the graph of function and its approximation
 * Nodes' number: 30.
16.11.2020 18:54:49 | The graph was built in 0.55 seconds.
16.11.2020 18:54:59 | Building the graph with following parameters:
 * function: <function build.<locals>.<lambda> at 0x000001F173EDD430>
 * Defined on (-10, 10)
 * Using `<function lagrange_polynomial at 0x000001F16E5744C0>` for approximation
 * Forming args as `(chebyshev_nodes(*xborders, nodes_n),)`
 * Build parameters: {'borders': 1, 'times': 100}
 * Building the graph of function and its approximation
 * Nodes' number: 30.
16.11.2020 18:54:59 | The graph was built in 0.55 seconds.
16.11.2020 18:55:20 | Building the graph with following parameters:
 * function: <function build.<locals>.<lambda> at 0x000001F1741DEF70>
 * Defined on (-10, 10)
 * Using `<function lagrange_polynomial at 0x000001F16E5744C0>` for approximation
 * Forming args as `(chebyshev_nodes(*xborders, nodes_n),)`
 * Build parameters: {'borders': 1, 'times': 100}
 * Building the graph of function and its approximation
 * Nodes' number: 30.
16.11.2020 18:55:20 | The graph was built in 0.54 seconds.
16.11.2020 19:04:31 | Building the graph with following parameters:
 * function: <function build.<locals>.<lambda> at 0x000002463671A940>
 * Defined on (-10, 10)
 * Using `<function lagrange_polynomial at 0x00000246367144C0>` for approximation
 * Forming args as `(chebyshev_nodes(*xborders, nodes_n),)`
 * Build parameters: {'borders': 1, 'times': 100}
 * Building the graph of function and its approximation
 * Nodes' number: 30.
16.11.2020 19:04:32 | The graph was built in 0.56 seconds.
16.11.2020 19:04:53 | Building the graph with following parameters:
 * function: <function build.<locals>.<lambda> at 0x0000024636CD68B0>
 * Defined on (-10, 10)
 * Using `<function lagrange_polynomial at 0x00000246367144C0>` for approximation
 * Forming args as `(chebyshev_nodes(*xborders, nodes_n),)`
 * Build parameters: {'borders': 1, 'times': 100}
 * Building the graph of function and its approximation
 * Nodes' number: 30.
16.11.2020 19:04:54 | The graph was built in 0.63 seconds.
16.11.2020 19:04:58 | Building the graph with following parameters:
 * function: <function build.<locals>.<lambda> at 0x000002463987E5E0>
 * Defined on (-10, 10)
 * Using `<function lagrange_polynomial at 0x00000246367144C0>` for approximation
 * Forming args as `(chebyshev_nodes(*xborders, nodes_n),)`
 * Build parameters: {'borders': 1, 'times': 100}
 * Building the graph of function and its approximation
 * Nodes' number: 30.
16.11.2020 19:04:58 | The graph was built in 0.60 seconds.
16.11.2020 19:05:05 | Building the graph with following parameters:
 * function: <function build.<locals>.<lambda> at 0x00000246369FD280>
 * Defined on (-10, 10)
 * Using `<function lagrange_polynomial at 0x00000246367144C0>` for approximation
 * Forming args as `(chebyshev_nodes(*xborders, nodes_n),)`
 * Build parameters: {'borders': 1, 'times': 100}
 * Building the graph of function and its approximation
 * Nodes' number: 30.
16.11.2020 19:05:06 | The graph was built in 0.59 seconds.
16.11.2020 19:06:01 | Building the graph with following parameters:
 * function: <function build.<locals>.<lambda> at 0x0000024636911F70>
 * Defined on (-10, 10)
 * Using `<function lagrange_polynomial at 0x00000246367144C0>` for approximation
 * Forming args as `(chebyshev_nodes(*xborders, nodes_n),)`
 * Build parameters: {'borders': 1, 'times': 100}
 * Building the graph of function and its approximation
 * Nodes' number: 30.
16.11.2020 19:06:02 | The graph was built in 0.56 seconds.
16.11.2020 19:06:19 | Building the graph with following parameters:
 * function: <function build.<locals>.<lambda> at 0x00000246368C5040>
 * Defined on (-10, 10)
 * Using `<function lagrange_polynomial at 0x00000246367144C0>` for approximation
 * Forming args as `(chebyshev_nodes(*xborders, nodes_n),)`
 * Build parameters: {'borders': 1, 'times': 100}
 * Building the graph of function and its approximation
 * Nodes' number: 30.
16.11.2020 19:06:19 | The graph was built in 0.60 seconds.
16.11.2020 19:06:42 | Building the graph with following parameters:
 * function: <function build.<locals>.<lambda> at 0x00000246368C5040>
 * Defined on (-10, 10)
 * Using `<function lagrange_polynomial at 0x00000246367144C0>` for approximation
 * Forming args as `(chebyshev_nodes(*xborders, nodes_n),)`
 * Build parameters: {'borders': 1, 'times': 100}
 * Building the graph of function and its approximation
 * Nodes' number: 30.
16.11.2020 19:06:43 | The graph was built in 0.57 seconds.
16.11.2020 19:07:01 | Building the graph with following parameters:
 * function: <function build.<locals>.<lambda> at 0x00000246368C5040>
 * Defined on (-10, 10)
 * Using `<function lagrange_polynomial at 0x00000246367144C0>` for approximation
 * Forming args as `(chebyshev_nodes(*xborders, nodes_n),)`
 * Build parameters: {'borders': 1, 'times': 100}
 * Building the graph of function and its approximation
 * Nodes' number: 30.
16.11.2020 19:07:01 | The graph was built in 0.60 seconds.
16.11.2020 19:07:33 | Building the graph with following parameters:
 * function: <function build.<locals>.<lambda> at 0x000001CC1D8E9940>
 * Defined on (-10, 10)
 * Using `<function lagrange_polynomial at 0x000001CC1D8E34C0>` for approximation
 * Forming args as `(chebyshev_nodes(*xborders, nodes_n),)`
 * Build parameters: {'borders': 1, 'times': 100}
 * Building the graph of function and its approximation
 * Nodes' number: 30.
16.11.2020 19:07:33 | The graph was built in 0.62 seconds.
16.11.2020 19:07:38 | Building the graph with following parameters:
 * function: <function build.<locals>.<lambda> at 0x000001CC1D8E9940>
 * Defined on (-10, 10)
 * Using `<function lagrange_polynomial at 0x000001CC1D8E34C0>` for approximation
 * Forming args as `(chebyshev_nodes(*xborders, nodes_n),)`
 * Build parameters: {'borders': 1, 'times': 100}
 * Building the graph of function and its approximation
 * Nodes' number: 30.
16.11.2020 19:07:39 | The graph was built in 0.61 seconds.
16.11.2020 19:07:42 | Building the graph with following parameters:
 * function: <function build.<locals>.<lambda> at 0x000001CC1D8E9940>
 * Defined on (-10, 10)
 * Using `<function lagrange_polynomial at 0x000001CC1D8E34C0>` for approximation
 * Forming args as `(chebyshev_nodes(*xborders, nodes_n),)`
 * Build parameters: {'borders': 1, 'times': 100}
 * Building the graph of function and its approximation
 * Nodes' number: 30.
16.11.2020 19:07:43 | The graph was built in 0.58 seconds.
16.11.2020 19:08:06 | Building the graph with following parameters:
 * function: <function build.<locals>.<lambda> at 0x000001C646049940>
 * Defined on (-10, 10)
 * Using `<function lagrange_polynomial at 0x000001C6460434C0>` for approximation
 * Forming args as `(chebyshev_nodes(*xborders, nodes_n),)`
 * Build parameters: {'borders': 1, 'times': 100}
 * Building the graph of function and its approximation
 * Nodes' number: 30.
16.11.2020 19:08:06 | The graph was built in 0.51 seconds.
16.11.2020 19:08:12 | Building the graph with following parameters:
 * function: <function build.<locals>.<lambda> at 0x000001C646049940>
 * Defined on (-10, 10)
 * Using `<function lagrange_polynomial at 0x000001C6460434C0>` for approximation
 * Forming args as `(chebyshev_nodes(*xborders, nodes_n),)`
 * Build parameters: {'borders': 1, 'times': 100}
 * Building the graph of function and its approximation
 * Nodes' number: 30.
16.11.2020 19:08:12 | The graph was built in 0.59 seconds.
16.11.2020 19:10:50 | Building the graph with following parameters:
 * function: <function build.<locals>.<lambda> at 0x000001C646049940>
 * Defined on (-10, 10)
 * Using `<function lagrange_polynomial at 0x000001C6460434C0>` for approximation
 * Forming args as `(chebyshev_nodes(*xborders, nodes_n),)`
 * Build parameters: {'borders': 1, 'times': 100}
 * Building the graph of function and its approximation
 * Nodes' number: 30.
16.11.2020 19:10:51 | The graph was built in 0.55 seconds.
16.11.2020 19:11:11 | Building the graph with following parameters:
 * function: <function build.<locals>.<lambda> at 0x000001C64BC6F700>
 * Defined on (-10, 10)
 * Using `<function lagrange_polynomial at 0x000001C6460434C0>` for approximation
 * Forming args as `(chebyshev_nodes(*xborders, nodes_n),)`
 * Build parameters: {'borders': 1, 'times': 100}
 * Building the graph of function and its approximation
 * Nodes' number: 30.
16.11.2020 19:11:12 | The graph was built in 0.60 seconds.
16.11.2020 19:11:25 | Building the graph with following parameters:
 * function: <function build.<locals>.<lambda> at 0x000001C64BB1A550>
 * Defined on (-10, 10)
 * Using `<function lagrange_polynomial at 0x000001C6460434C0>` for approximation
 * Forming args as `(chebyshev_nodes(*xborders, nodes_n),)`
 * Build parameters: {'borders': 1, 'times': 100}
 * Building the graph of function and its approximation
 * Nodes' number: 30.
16.11.2020 19:11:26 | The graph was built in 0.59 seconds.
16.11.2020 19:12:44 | Building the graph with following parameters:
 * function: <function build.<locals>.<lambda> at 0x000001F88CBC1940>
 * Defined on (-10, 10)
 * Using `<function lagrange_polynomial at 0x000001F88CBC34C0>` for approximation
 * Forming args as `(chebyshev_nodes(*xborders, nodes_n),)`
 * Build parameters: {'borders': 1, 'times': 100}
 * Building the graph of function and its approximation
 * Nodes' number: 30.
16.11.2020 19:12:44 | The graph was built in 0.54 seconds.
16.11.2020 20:24:31 | Building the graph with following parameters:
 * function: <function build.<locals>.<lambda> at 0x000002128FE3A940>
 * Defined on (-10, 10)
 * Using `<function lagrange_polynomial at 0x000002128FE344C0>` for approximation
 * Forming args as `(chebyshev_nodes(*xborders, nodes_n),)`
 * Build parameters: {'borders': 1, 'times': 100}
 * Building the graph of function and its approximation
 * Nodes' number: 30.
16.11.2020 20:24:32 | The graph was built in 0.52 seconds.
16.11.2020 21:23:16 | Building the graph with following parameters:
 * function: <function build.<locals>.<lambda> at 0x000001CA17A62940>
 * Defined on (-10, 10)
 * Using `<function lagrange_polynomial at 0x000001CA17A634C0>` for approximation
 * Forming args as `(chebyshev_nodes(*xborders, nodes_n),)`
 * Build parameters: {'borders': 1, 'times': 100}
 * Building the graph of function and its approximation
 * Nodes' number: 30.
16.11.2020 21:23:17 | The graph was built in 0.60 seconds.
17.11.2020 10:31:32 | Building the graph with following parameters:
 * function: <function build.<locals>.<lambda> at 0x0000023FA1011940>
 * Defined on (-10, 10)
 * Using `<function lagrange_polynomial at 0x0000023FA10134C0>` for approximation
 * Forming args as `(chebyshev_nodes(*xborders, nodes_n),)`
 * Build parameters: {'borders': 1, 'times': 100}
 * Building the graph of function and its approximation
 * Nodes' number: 30.
17.11.2020 10:31:32 | The graph was built in 0.61 seconds.
17.11.2020 10:49:07 | Building the graph with following parameters:
 * function: <function build.<locals>.<lambda> at 0x00000145A8D7C940>
 * Defined on (-10, 10)
 * Using `<function lagrange_polynomial at 0x00000145A8D834C0>` for approximation
 * Forming args as `(chebyshev_nodes(*xborders, nodes_n),)`
 * Build parameters: {'borders': 1, 'times': 100}
 * Building the graph of function and its approximation
 * Nodes' number: 30.
17.11.2020 10:49:07 | While building graph: error: name 'a' is not defined
17.11.2020 10:49:18 | Building the graph with following parameters:
 * function: <function build.<locals>.<lambda> at 0x00000145A8D7C940>
 * Defined on (-10, 10)
 * Using `<function lagrange_polynomial at 0x00000145A8D834C0>` for approximation
 * Forming args as `(chebyshev_nodes(*xborders, nodes_n),)`
 * Build parameters: {'borders': 1, 'times': 100}
 * Building the graph of function and its approximation
 * Nodes' number: 30.
17.11.2020 10:49:19 | While building graph: error: weierstrass_function() got an unexpected keyword argument 'max_n'
17.11.2020 10:49:28 | Building the graph with following parameters:
 * function: <function build.<locals>.<lambda> at 0x00000145A8D7C940>
 * Defined on (-10, 10)
 * Using `<function lagrange_polynomial at 0x00000145A8D834C0>` for approximation
 * Forming args as `(chebyshev_nodes(*xborders, nodes_n),)`
 * Build parameters: {'borders': 1, 'times': 100}
 * Building the graph of function and its approximation
 * Nodes' number: 30.
17.11.2020 10:49:28 | While building graph: error: weierstrass_function() got an unexpected keyword argument 'max_n'
17.11.2020 10:49:40 | Building the graph with following parameters:
 * function: <function build.<locals>.<lambda> at 0x00000145A8D7C940>
 * Defined on (-10, 10)
 * Using `<function lagrange_polynomial at 0x00000145A8D834C0>` for approximation
 * Forming args as `(chebyshev_nodes(*xborders, nodes_n),)`
 * Build parameters: {'borders': 1, 'times': 100}
 * Building the graph of function and its approximation
 * Nodes' number: 30.
17.11.2020 10:49:40 | While building graph: error: unsupported operand type(s) for *: 'function' and 'float'
17.11.2020 10:49:52 | Building the graph with following parameters:
 * function: <function build.<locals>.<lambda> at 0x00000145A8D7C940>
 * Defined on (-10, 10)
 * Using `<function lagrange_polynomial at 0x00000145A8D834C0>` for approximation
 * Forming args as `(chebyshev_nodes(*xborders, nodes_n),)`
 * Build parameters: {'borders': 1, 'times': 100}
 * Building the graph of function and its approximation
 * Nodes' number: 30.
17.11.2020 10:49:52 | While building graph: error: unsupported operand type(s) for *: 'function' and 'float'
17.11.2020 10:54:47 | Building the graph with following parameters:
 * function: <function build.<locals>.<lambda> at 0x000001CEF00DC940>
 * Defined on (-10, 10)
 * Using `<function lagrange_polynomial at 0x000001CEF00E34C0>` for approximation
 * Forming args as `(chebyshev_nodes(*xborders, nodes_n),)`
 * Build parameters: {'borders': 1, 'times': 100}
 * Building the graph of function and its approximation
 * Nodes' number: 30.
17.11.2020 10:54:47 | While building graph: error: unsupported operand type(s) for *: 'function' and 'float'
17.11.2020 10:55:20 | Building the graph with following parameters:
 * function: <function build.<locals>.<lambda> at 0x000001CEF00DC940>
 * Defined on (-10, 10)
 * Using `<function lagrange_polynomial at 0x000001CEF00E34C0>` for approximation
 * Forming args as `(chebyshev_nodes(*xborders, nodes_n),)`
 * Build parameters: {'borders': 1, 'times': 100}
 * Building the graph of function and its approximation
 * Nodes' number: 30.
17.11.2020 10:55:20 | While building graph: error: unsupported operand type(s) for *: 'function' and 'float'
17.11.2020 11:03:13 | Building the graph with following parameters:
 * function: <function build.<locals>.<lambda> at 0x000001FE232DB4C0>
 * Defined on (-10, 10)
 * Using `<function lagrange_polynomial at 0x000001FE20BF44C0>` for approximation
 * Forming args as `(chebyshev_nodes(*xborders, nodes_n),)`
 * Build parameters: {'borders': 1, 'times': 100}
 * Building the graph of function and its approximation
 * Nodes' number: 30.
17.11.2020 11:03:15 | The graph was built in 2.27 seconds.
17.11.2020 11:25:56 | Building the graph with following parameters:
 * function: <function build.<locals>.<lambda> at 0x000001D2018B1940>
 * Defined on (-10, 10)
 * Using `<function lagrange_polynomial at 0x000001D2018B34C0>` for approximation
 * Forming args as `(chebyshev_nodes(*xborders, nodes_n),)`
 * Build parameters: {'borders': 1, 'times': 100}
 * Building the graph of function and its approximation
 * Nodes' number: 30.
17.11.2020 11:25:56 | The graph was built in 0.60 seconds.
17.11.2020 11:27:07 | Building the graph with following parameters:
 * function: <function build.<locals>.<lambda> at 0x000002A0CB36D940>
 * Defined on (-10, 10)
 * Using `<function lagrange_polynomial at 0x000002A0CB3734C0>` for approximation
 * Forming args as `(chebyshev_nodes(*xborders, nodes_n),)`
 * Build parameters: {'borders': 1, 'times': 100}
 * Building the graph of function and its approximation
 * Nodes' number: 30.
17.11.2020 11:27:09 | The graph was built in 2.14 seconds.
17.11.2020 11:27:20 | Building the graph with following parameters:
 * function: <function build.<locals>.<lambda> at 0x000002A0CB910550>
 * Defined on (-10, 10)
 * Using `<function lagrange_polynomial at 0x000002A0CB3734C0>` for approximation
 * Forming args as `(chebyshev_nodes(*xborders, nodes_n),)`
 * Build parameters: {'borders': 1, 'times': 100}
 * Building the graph of function and its approximation
 * Nodes' number: 10.
17.11.2020 11:27:21 | The graph was built in 0.70 seconds.
17.11.2020 11:27:29 | Building the table with following parameters:
 * Function: exp(sin(x)) - x/2
 * Defined on (-10, 10)
 * Using `lagrange_polynomial` for approximation
 * Nodes' number: 10.
 * Alpha: None.
17.11.2020 11:27:30 | The table was built in 1.07 seconds.
17.11.2020 11:28:08 | Building the graph with following parameters:
 * function: <function build.<locals>.<lambda> at 0x000002A0CE7011F0>
 * Defined on (-10, 10)
 * Using `<function lagrange_polynomial at 0x000002A0CB3734C0>` for approximation
 * Forming args as `(chebyshev_nodes(*xborders, nodes_n),)`
 * Build parameters: {'borders': 1, 'times': 100}
 * Building the graph of function and its approximation
 * Nodes' number: 10.
17.11.2020 11:28:09 | The graph was built in 0.74 seconds.
17.11.2020 11:30:38 | Building the table with following parameters:
 * Function: exp(sin(x)) - x/2
 * Defined on (-10, 10)
 * Using `lagrange_polynomial` for approximation
 * Nodes' number: 10.
 * Alpha: None.
17.11.2020 11:30:40 | The table was built in 1.08 seconds.
17.11.2020 11:30:46 | Building the table with following parameters:
 * Function: exp(sin(x)) - x/2
 * Defined on (-10, 10)
 * Using `lagrange_polynomial` for approximation
 * Nodes' number: 70.
 * Alpha: None.
17.11.2020 11:30:54 | The table was built in 7.74 seconds.
17.11.2020 11:33:32 | Building the table with following parameters:
 * Function: exp(sin(x)) - x/2
 * Defined on (-10, 10)
 * Using `lagrange_polynomial` for approximation
 * Nodes' number: 70.
 * Alpha: None.
17.11.2020 11:33:41 | The table was built in 8.56 seconds.
17.11.2020 11:34:04 | Building the graph with following parameters:
 * function: <function build.<locals>.<lambda> at 0x000002A0D20CDC10>
 * Defined on (-10, 10)
 * Using `<function lagrange_polynomial at 0x000002A0CB3734C0>` for approximation
 * Forming args as `(chebyshev_nodes(*xborders, nodes_n),)`
 * Build parameters: {'borders': 1, 'times': 100}
 * Building the graph of function and its approximation
 * Nodes' number: 70.
17.11.2020 11:34:08 | The graph was built in 3.98 seconds.
17.11.2020 11:34:39 | Building the table with following parameters:
 * Function: exp(sin(x)) - x/2
 * Defined on (-10, 10)
 * Using `lagrange_polynomial` for approximation
 * Nodes' number: 70.
 * Alpha: None.
17.11.2020 11:34:47 | The table was built in 7.82 seconds.
17.11.2020 11:36:06 | Building the graph with following parameters:
 * function: <function build.<locals>.<lambda> at 0x000002A0D20DA4C0>
 * Defined on (-10, 10)
 * Using `<function lagrange_polynomial at 0x000002A0CB3734C0>` for approximation
 * Forming args as `(chebyshev_nodes(*xborders, nodes_n),)`
 * Build parameters: {'borders': 1, 'times': 100}
 * Building the graph of function only
 * Nodes' number: 1.
17.11.2020 11:36:06 | The graph was built in 0.35 seconds.
17.11.2020 11:40:42 | Building the graph with following parameters:
 * function: <function build.<locals>.<lambda> at 0x000002A0D217E550>
 * Defined on (-10, 10)
 * Using `<function newton_polynomial_forward at 0x000002A0CB373430>` for approximation
 * Forming args as `(chebyshev_nodes(*xborders, nodes_n),)`
 * Build parameters: {'borders': 1, 'times': 100}
 * Building the graph of function only
 * Nodes' number: 20.
17.11.2020 11:40:43 | The graph was built in 0.36 seconds.
17.11.2020 11:43:16 | Building the graph with following parameters:
 * function: <function build.<locals>.<lambda> at 0x000002A0D21D8820>
 * Defined on (-10, 10)
 * Using `<function newton_polynomial_forward at 0x000002A0CB373430>` for approximation
 * Forming args as `(chebyshev_nodes(*xborders, nodes_n),)`
 * Build parameters: {'borders': 1, 'times': 100}
 * Building the graph of function and its approximation
 * Nodes' number: 30.
17.11.2020 11:43:20 | The graph was built in 4.34 seconds.
17.11.2020 12:42:05 | Building the graph with following parameters:
 * function: <function build.<locals>.<lambda> at 0x000002A0D0F2BA60>
 * Defined on (-10, 10)
 * Using `<function newton_polynomial_forward at 0x000002A0CB373430>` for approximation
 * Forming args as `(chebyshev_nodes(*xborders, nodes_n),)`
 * Build parameters: {'borders': 1, 'times': 100}
 * Building the graph of function and its approximation
 * Nodes' number: 30.
17.11.2020 12:42:09 | The graph was built in 4.35 seconds.
17.11.2020 12:42:15 | Building the table with following parameters:
 * Function: exp(sin(x)) - x/2
 * Defined on (-10, 10)
 * Using `newton_polynomial_forward` for approximation
 * Nodes' number: 30.
 * Alpha: None.
17.11.2020 12:42:17 | The table was built in 1.52 seconds.
17.11.2020 12:42:36 | Building the graph with following parameters:
 * function: <function build.<locals>.<lambda> at 0x000002A0D221BD30>
 * Defined on (-10, 10)
 * Using `<function newton_polynomial_forward at 0x000002A0CB373430>` for approximation
 * Forming args as `(chebyshev_nodes(*xborders, nodes_n),)`
 * Build parameters: {'times': 110, 'borders': 1}
 * Building the graph of function and its approximation
 * Nodes' number: 30.
17.11.2020 12:42:41 | The graph was built in 5.04 seconds.
17.11.2020 12:42:54 | Building the graph with following parameters:
 * function: <function build.<locals>.<lambda> at 0x000002A0D23E3430>
 * Defined on (-10, 10)
 * Using `<function newton_polynomial_forward at 0x000002A0CB373430>` for approximation
 * Forming args as `(chebyshev_nodes(*xborders, nodes_n),)`
 * Build parameters: {'times': 300, 'borders': 1}
 * Building the graph of function and its approximation
 * Nodes' number: 30.
17.11.2020 12:43:09 | The graph was built in 14.80 seconds.
17.11.2020 13:43:40 | Building the graph with following parameters:
 * function: <function build.<locals>.<lambda> at 0x000001FECD270940>
 * Defined on (-10, 10)
 * Using `<function lagrange_polynomial at 0x000001FECD2744C0>` for approximation
 * Forming args as `(chebyshev_nodes(*xborders, nodes_n),)`
 * Build parameters: {'borders': 1, 'times': 100}
 * Building the graph of function and its approximation
 * Nodes' number: 30.
17.11.2020 13:43:40 | The graph was built in 0.55 seconds.
17.11.2020 13:43:53 | Building the graph with following parameters:
 * function: <function build.<locals>.<lambda> at 0x000001FED03BF550>
 * Defined on (-10, 10)
 * Using `<function lagrange_polynomial at 0x000001FECD2744C0>` for approximation
 * Forming args as `(chebyshev_nodes(*xborders, nodes_n),)`
 * Build parameters: {'borders': 1, 'times': 100}
 * Building the graph of function only
 * Nodes' number: 30.
17.11.2020 13:43:53 | The graph was built in 0.34 seconds.
17.11.2020 13:44:01 | Building the graph with following parameters:
 * function: <function build.<locals>.<lambda> at 0x000001FECD270B80>
 * Defined on (-10, 10)
 * Using `<function lagrange_polynomial at 0x000001FECD2744C0>` for approximation
 * Forming args as `(chebyshev_nodes(*xborders, nodes_n),)`
 * Build parameters: {'borders': 1, 'times': 100}
 * Building the graph of approximation only
 * Nodes' number: 30.
17.11.2020 13:44:01 | The graph was built in 0.55 seconds.
29.11.2020 12:05:04 | Building the graph with following parameters:
 * function: <function build.<locals>.<lambda> at 0x000001E937EEE940>
 * Defined on (-10, 10)
 * Using `<function lagrange_polynomial at 0x000001E937EF54C0>` for interpolating
 * Forming args as `(chebyshev_nodes(*xborders, nodes_n),)`
 * Build parameters: {'borders': 1, 'times': 100}
 * Building the graph of interpolant only
 * Nodes' number: 30.
29.11.2020 12:05:04 | While building graph: error: 
29.11.2020 12:05:12 | Building the graph with following parameters:
 * function: <function build.<locals>.<lambda> at 0x000001E937EEE940>
 * Defined on (-10, 10)
 * Using `<function lagrange_polynomial at 0x000001E937EF54C0>` for interpolating
 * Forming args as `(chebyshev_nodes(*xborders, nodes_n),)`
 * Build parameters: {'borders': 1, 'times': 100}
 * Building the graph of function and its interpolant
 * Nodes' number: 30.
29.11.2020 12:05:13 | While building graph: error: local variable 'ax' referenced before assignment
29.11.2020 12:11:30 | Building the graph with following parameters:
 * function: <function build.<locals>.<lambda> at 0x00000182F57DE940>
 * Defined on (-10, 10)
 * Using `<function lagrange_polynomial at 0x00000182F57E54C0>` for interpolating
 * Forming args as `(chebyshev_nodes(*xborders, nodes_n),)`
 * Build parameters: {'borders': 1, 'times': 100}
 * Building the graph of function and its interpolant
 * Nodes' number: 30.
29.11.2020 12:11:30 | While building graph: error: local variable 'ax' referenced before assignment
29.11.2020 12:12:26 | Building the graph with following parameters:
 * function: <function build.<locals>.<lambda> at 0x0000018A161D29D0>
 * Defined on (-10, 10)
 * Using `<function lagrange_polynomial at 0x0000018A161D6550>` for interpolating
 * Forming args as `(chebyshev_nodes(*xborders, nodes_n),)`
 * Build parameters: {'borders': 1, 'times': 100}
 * Building the graph of function and its interpolant
 * Nodes' number: 30.
29.11.2020 12:12:28 | While building graph: error: local variable 'ax' referenced before assignment
29.11.2020 12:12:52 | Building the graph with following parameters:
 * function: <function build.<locals>.<lambda> at 0x000001E57FDF2940>
 * Defined on (-10, 10)
 * Using `<function lagrange_polynomial at 0x000001E57FDF64C0>` for interpolating
 * Forming args as `(chebyshev_nodes(*xborders, nodes_n),)`
 * Build parameters: {'borders': 1, 'times': 100}
 * Building the graph of function and its interpolant
 * Nodes' number: 30.
29.11.2020 12:12:54 | While building graph: error: local variable 'ax' referenced before assignment
29.11.2020 12:14:23 | Building the graph with following parameters:
 * function: <function build.<locals>.<lambda> at 0x00000201FA241940>
 * Defined on (-10, 10)
 * Using `<function lagrange_polynomial at 0x00000201FA2464C0>` for interpolating
 * Forming args as `(chebyshev_nodes(*xborders, nodes_n),)`
 * Build parameters: {'borders': 1, 'times': 100}
 * Building the graph of function and its interpolant
 * Nodes' number: 30.
29.11.2020 12:14:23 | The graph was built in 0.43 seconds.
29.11.2020 12:14:36 | Building the graph with following parameters:
 * function: <function build.<locals>.<lambda> at 0x000002A8289D4940>
 * Defined on (-10, 10)
 * Using `<function lagrange_polynomial at 0x000002A8289D74C0>` for interpolating
 * Forming args as `(chebyshev_nodes(*xborders, nodes_n),)`
 * Build parameters: {'borders': 1, 'times': 100}
 * Building the graph of function and its interpolant
 * Nodes' number: 30.
29.11.2020 12:14:36 | While building graph: error: local variable 'ax' referenced before assignment
29.11.2020 12:17:02 | Building the graph with following parameters:
 * function: <function build.<locals>.<lambda> at 0x000001C4B0BF2940>
 * Defined on (-10, 10)
 * Using `<function lagrange_polynomial at 0x000001C4B0BF64C0>` for interpolating
 * Forming args as `(chebyshev_nodes(*xborders, nodes_n),)`
 * Build parameters: {'borders': 1, 'times': 100}
 * Building the graph of function and its interpolant
 * Nodes' number: 30.
29.11.2020 12:17:02 | The graph was built in 0.42 seconds.
29.11.2020 12:17:14 | Building the graph with following parameters:
 * function: <function build.<locals>.<lambda> at 0x000001C4B3D6F550>
 * Defined on (-10, 10)
 * Using `<function newton_polynomial_forward at 0x000001C4B0BF6430>` for interpolating
 * Forming args as `(chebyshev_nodes(*xborders, nodes_n),)`
 * Build parameters: {'borders': 1, 'times': 100}
 * Building the graph of function and its interpolant
 * Nodes' number: 30.
29.11.2020 12:17:15 | The graph was built in 0.40 seconds.
29.11.2020 12:17:23 | Building the graph with following parameters:
 * function: <function build.<locals>.<lambda> at 0x000001C4B0BF2940>
 * Defined on (-10, 10)
 * Using `<function newton_polynomial_forward at 0x000001C4B0BF6430>` for interpolating
 * Forming args as `(chebyshev_nodes(*xborders, nodes_n),)`
 * Build parameters: {'borders': 1, 'times': 100}
 * Building the graph of function only
 * Nodes' number: 30.
29.11.2020 12:17:23 | The graph was built in 0.25 seconds.
29.11.2020 12:17:44 | Building the graph with following parameters:
 * function: <function build.<locals>.<lambda> at 0x000001C4B655E430>
 * Defined on (-10, 10)
 * Using `<function lagrange_polynomial at 0x000001C4B0BF64C0>` for interpolating
 * Forming args as `(chebyshev_nodes(*xborders, nodes_n),)`
 * Build parameters: {'borders': 1, 'times': 100}
 * Building the graph of interpolant only
 * Nodes' number: 30.
29.11.2020 12:17:44 | The graph was built in 0.38 seconds.
29.11.2020 12:18:12 | Building the graph with following parameters:
 * function: <function build.<locals>.<lambda> at 0x000001C4B0BF2A60>
 * Defined on (-10, 10)
 * Using `<function lagrange_polynomial at 0x000001C4B0BF64C0>` for interpolating
 * Forming args as `(chebyshev_nodes(*xborders, nodes_n),)`
 * Build parameters: {'borders': 1, 'times': 100}
 * Building the graph of interpolant only
 * Nodes' number: 30.
29.11.2020 12:18:12 | The graph was built in 0.47 seconds.
29.11.2020 12:18:18 | Building the table with following parameters:
 * Function: abs(x)
 * Defined on (-10, 10)
 * Using `lagrange_polynomial` for interpolating
 * Nodes' number: 30.
 * Alpha: None.
29.11.2020 12:18:20 | The table was built in 1.39 seconds.
29.11.2020 12:21:51 | Building the graph with following parameters:
 * function: <function build.<locals>.<lambda> at 0x000001CEF674F940>
 * Defined on (-10, 10)
 * Using `<function lagrange_polynomial at 0x000001CEF67454C0>` for interpolating
 * Forming args as `(chebyshev_nodes(*xborders, nodes_n),)`
 * Build parameters: {'borders': 1, 'times': 100}
 * Building the graph of function and its interpolant
 * Nodes' number: 30.
29.11.2020 12:21:52 | The graph was built in 0.38 seconds.
29.11.2020 12:22:01 | Building the table with following parameters:
 * Function: abs(x)
 * Defined on (-10, 10)
 * Using `lagrange_polynomial` for interpolating
 * Nodes' number: 30.
 * Alpha: None.
29.11.2020 12:22:02 | The table was built in 1.37 seconds.
17.12.2020 20:56:23 | Building the graph with following parameters:
 * function: <function build.<locals>.<lambda> at 0x00000198A2432940>
 * Defined on (-10, 10)
 * Using `<function cubic_spline at 0x000001989A527EE0>` for interpolating
 * Forming args as `(chebyshev_nodes(*xborders, nodes_n),)`
 * Build parameters: {'borders': 1, 'times': 100}
 * Building the graph of function and its interpolant
 * Nodes' number: 10.
17.12.2020 20:56:24 | The graph was built in 0.93 seconds.
17.12.2020 20:56:43 | Building the graph with following parameters:
 * function: <function build.<locals>.<lambda> at 0x00000198A24BD4C0>
 * Defined on (-10, 10)
 * Using `<function cubic_spline at 0x000001989A527EE0>` for interpolating
 * Forming args as `(chebyshev_nodes(*xborders, nodes_n),)`
 * Build parameters: {'expand': 0.99, 'borders': 1, 'times': 100}
 * Building the graph of function and its interpolant
 * Nodes' number: 10.
17.12.2020 20:56:44 | The graph was built in 0.75 seconds.
17.12.2020 20:56:56 | Building the graph with following parameters:
 * function: <function build.<locals>.<lambda> at 0x00000198A2432AF0>
 * Defined on (-10, 10)
 * Using `<function cubic_spline at 0x000001989A527EE0>` for interpolating
 * Forming args as `(chebyshev_nodes(*xborders, nodes_n),)`
 * Build parameters: {'expand': 0.9, 'borders': 1, 'times': 100}
 * Building the graph of function and its interpolant
 * Nodes' number: 10.
17.12.2020 20:56:57 | The graph was built in 0.72 seconds.
17.12.2020 20:57:07 | Building the graph with following parameters:
 * function: <function build.<locals>.<lambda> at 0x00000198A24BD4C0>
 * Defined on (-10, 10)
 * Using `<function cubic_spline at 0x000001989A527EE0>` for interpolating
 * Forming args as `(chebyshev_nodes(*xborders, nodes_n),)`
 * Build parameters: {'borders': 0.9, 'times': 100}
 * Building the graph of function and its interpolant
 * Nodes' number: 10.
17.12.2020 20:57:08 | The graph was built in 0.84 seconds.
17.12.2020 20:57:18 | Building the graph with following parameters:
 * function: <function build.<locals>.<lambda> at 0x00000198A7FF84C0>
 * Defined on (-10, 10)
 * Using `<function cubic_spline at 0x000001989A527EE0>` for interpolating
 * Forming args as `(chebyshev_nodes(*xborders, nodes_n),)`
 * Build parameters: {'borders': 0.99, 'times': 100}
 * Building the graph of function and its interpolant
 * Nodes' number: 10.
17.12.2020 20:57:19 | The graph was built in 0.86 seconds.
17.12.2020 20:57:30 | Building the graph with following parameters:
 * function: <function build.<locals>.<lambda> at 0x00000198A24BDF70>
 * Defined on (-10, 10)
 * Using `<function cubic_spline at 0x000001989A527EE0>` for interpolating
 * Forming args as `(chebyshev_nodes(*xborders, nodes_n),)`
 * Build parameters: {'borders': 0.9, 'times': 100}
 * Building the graph of function and its interpolant
 * Nodes' number: 10.
17.12.2020 20:57:30 | The graph was built in 0.70 seconds.
17.12.2020 20:59:40 | Building the table with following parameters:
 * Function: exp(sin(x)) - x/2
 * Defined on (-10, 10)
 * Using `cubic_spline` for interpolating
 * Nodes' number: 10.
 * Alpha: None.
17.12.2020 20:59:41 | The table was built in 1.09 seconds.
18.12.2020 15:57:57 | Building the table with following parameters:
 * Function: sin(x)
 * Defined on (-1, 1)
 * Using `cubic_spline` for interpolating
 * Nodes' number: 10.
 * Alpha: None.
18.12.2020 15:57:58 | The table was built in 1.06 seconds.
18.12.2020 15:59:59 | Building the table with following parameters:
 * Function: sin(x)
 * Defined on (-1, 1)
 * Using `cubic_spline` for interpolating
 * Nodes' number: 10.
 * Alpha: 0.5049019608.
18.12.2020 16:00:00 | The table was built in 1.08 seconds.
18.12.2020 16:00:56 | Building the table with following parameters:
 * Function: sin(x)
 * Defined on (-1, 1)
 * Using `cubic_spline` for interpolating
 * Nodes' number: 10.
 * Alpha: 0.5049019608.
18.12.2020 16:00:58 | The table was built in 1.10 seconds.
31.08.2021 12:06:47 | Building the table with following parameters:
 * Function: abs(x)
 * Defined on (-10, 10)
 * Using `lagrange_polynomial` for interpolating
 * Nodes' number: 30.
 * Alpha: None.
31.08.2021 12:06:48 | The table was built in 1.24 seconds.
31.08.2021 12:07:26 | Building the graph with following parameters:
 * function: <function build.<locals>.<lambda> at 0x0000017E87ABAAF0>
 * Defined on (-10, 10)
 * Using `<function lagrange_polynomial at 0x0000017E87ABE040>` for interpolating
 * Forming args as `(chebyshev_nodes(*xborders, nodes_n),)`
 * Build parameters: {'borders': 1, 'times': 100}
 * Building the graph of function and its interpolant
 * Nodes' number: 30.
31.08.2021 12:07:26 | The graph was built in 0.24 seconds.
04.11.2021 14:39:14 | Building the graph with following parameters:
 * function: <function build.<locals>.<lambda> at 0x000002613206C160>
 * Defined on (-10, 10)
 * Using `<function lagrange_polynomial at 0x0000026132038CA0>` for interpolating
 * Forming args as `(chebyshev_nodes(*xborders, nodes_n),)`
 * Build parameters: {'borders': 1, 'times': 100}
 * Building the graph of function and its interpolant
 * Nodes' number: 30.
04.11.2021 14:39:14 | The graph was built in 0.24 seconds.
04.11.2021 14:39:47 | Building the graph with following parameters:
 * function: <function build.<locals>.<lambda> at 0x000002613ABBC0D0>
 * Defined on (-10, 10)
 * Using `<function lagrange_polynomial at 0x0000026132038CA0>` for interpolating
 * Forming args as `(chebyshev_nodes(*xborders, nodes_n),)`
 * Build parameters: {'borders': 1, 'times': 100}
 * Building the graph of function and its interpolant
 * Nodes' number: 30.
04.11.2021 14:39:47 | While building graph: error: invalid syntax (<string>, line 1)
04.11.2021 14:40:02 | Building the graph with following parameters:
 * function: <function build.<locals>.<lambda> at 0x000002613ABBC0D0>
 * Defined on (-10, 10)
 * Using `<function lagrange_polynomial at 0x0000026132038CA0>` for interpolating
 * Forming args as `(chebyshev_nodes(*xborders, nodes_n),)`
 * Build parameters: {'borders': 1, 'times': 100}
 * Building the graph of function and its interpolant
 * Nodes' number: 30.
04.11.2021 14:40:02 | While building graph: error: 'NoneType' object is not iterable
04.11.2021 14:40:15 | Building the graph with following parameters:
 * function: <function build.<locals>.<lambda> at 0x000002613ABBC0D0>
 * Defined on (-10, 10)
 * Using `<function lagrange_polynomial at 0x0000026132038CA0>` for interpolating
 * Forming args as `(chebyshev_nodes(*xborders, nodes_n),)`
 * Build parameters: {'borders': 1, 'times': 100}
 * Building the graph of function and its interpolant
 * Nodes' number: 30.
04.11.2021 14:40:15 | While building graph: error: 'NoneType' object is not iterable
04.11.2021 14:42:59 | Building the table with following parameters:
 * Function: abs(x)
 * Defined on (-10, 10)
 * Using `lagrange_polynomial` for interpolating
 * Nodes' number: 30.
 * Alpha: None.
04.11.2021 14:43:00 | The table was built in 1.33 seconds.
04.11.2021 14:44:36 | Building the graph with following parameters:
 * function: <function build.<locals>.<lambda> at 0x000002004F0EC9D0>
 * Defined on (-10, 10)
 * Using `<function lagrange_polynomial at 0x000002004F0B8CA0>` for interpolating
 * Forming args as `(chebyshev_nodes(*xborders, nodes_n),)`
 * Build parameters: {'borders': 1, 'times': 100}
 * Building the graph of function and its interpolant
 * Nodes' number: 30.
04.11.2021 14:44:36 | The graph was built in 0.27 seconds.
04.11.2021 14:45:04 | Building the table with following parameters:
 * Function: abs(x)
 * Defined on (-10, 10)
 * Using `lagrange_polynomial` for interpolating
 * Nodes' number: 30.
 * Alpha: None.
04.11.2021 14:45:05 | The table was built in 1.30 seconds.
04.11.2021 14:51:19 | Building the table with following parameters:
 * Function: abs(x)
 * Defined on (-10, 10)
 * Using `lagrange_polynomial` for interpolating
 * Nodes' number: 30.
 * Alpha: None.
04.11.2021 14:51:20 | The table was built in 1.31 seconds.
04.11.2021 14:51:36 | Building the table with following parameters:
 * Function: abs(x)
 * Defined on (-10, 10)
 * Using `lagrange_polynomial` for interpolating
 * Nodes' number: 100.
 * Alpha: None.
04.11.2021 14:51:45 | The table was built in 8.04 seconds.
